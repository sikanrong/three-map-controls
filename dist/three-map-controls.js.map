{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///delegated ./node_modules/three/build/three.module.js from dll-reference vendor","webpack:///./src/three-map-controls.js","webpack:///./test/stub_dom.js","webpack:///external \"vendor\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","three__WEBPACK_IMPORTED_MODULE_0__","window","require","MapControls","EventDispatcher","constructor","camera","domElement","options","super","this","undefined","document","body","enabled","target","minDistance","maxDistance","enableZoom","zoomSpeed","zoomDampingAlpha","initialZoom","enablePan","keyPanSpeed","panDampingAlpha","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ZOOM","MOUSE","MIDDLE","PAN","assign","isTargetValid","mode","Error","normal","constant","center","radius","_eventListeners","contextmenu","_onContextMenu","bind","mousedown","_onMouseDown","mousewheel","_onMouseWheel","MozMousePixelScroll","touchstart","_onTouchStart","touchend","_onTouchEnd","touchmove","_onTouchMove","keydown","_onKeyDown","mousemove","_onMouseMove","mouseup","_onMouseUp","_init","target0","clone","position0","position","zoom0","zoom","_changeEvent","type","_startEvent","_endEvent","_STATES","NONE","DOLLY","TOUCH_DOLLY","TOUCH_PAN","distanceToPoint","_state","_mouse","Vector2","_finalTargetDistance","_currentTargetDistance","_panTarget","Vector3","_panCurrent","_minZoomPosition","_maxZoomPosition","_panStart","_panEnd","_panDelta","_dollyStart","_dollyEnd","_dollyDelta","_camOrientation","_zoomAlpha","_screenWorldXform","Math","tan","fov","PI","_straightDollyTrack","lerpVectors","abs","res","_intersectCameraTarget","lookAt","intersection","ray","direction","normalize","_updateZoomAlpha","forEach","_e","addEventListener","update","coplanar","projectPoint","Ray","subVectors","intersectPlane","intersectSphere","_updateDollyTrack","getZoomAlpha","reset","copy","updateProjectionMatrix","dispatchEvent","panDelta","oldPanCurrent","lerp","add","v","quat","Quaternion","setFromAxisAngle","setFromMatrixColumn","matrix","x","applyQuaternion","y","z","dispose","removeEventListener","zoomToFit","mesh","dims","geometry","boundingSphere","localToWorld","diameter","targetCoord","_sphericalCoordinatesFrom","camCoord","delta","vFOV","hFOV","atan","aspect","obj_aspect","targetAreaVisible","bbox","vOffset","hOffset","depth","distanceToPlane","Box2","cam_pos","halfPi","length","min","cos","_mm","cartesian_vec","rel_pos","rel_xzcomponent","sphCoord","angleTo","max","diff","damping_alpha","round","intersect","addVectors","multiplyScalar","_calculateMinZoom","sub","_getZoomScale","pow","_panLeft","distance","cameraMatrix","set","_panUp","_pan","deltaX","deltaY","targetDistance","element","camToTarget","clientHeight","_dollyIn","dollyScale","_cameraOfKnownType","console","warn","_dollyOut","_handleUpdateDollyTrackMouse","event","prevMouse","offsetX","clientWidth","offsetY","equals","rc","Raycaster","setFromCamera","_handleMouseDownDolly","_handleMouseDownPan","_handleMouseMoveDolly","_handleMouseMovePan","_handleMouseUp","map_intersect","_handleMouseWheel","wheelDelta","detail","_handleKeyDown","keyCode","_handleUpdateDollyTrackTouch","centerpoint","dx","touches","pageX","dy","pageY","mouse","_handleTouchStartDolly","sqrt","_handleTouchStartPan","_handleTouchMoveDolly","_handleTouchMovePan","_handleTouchEnd","preventDefault","button","stopPropagation","log","vendor"],"mappings":"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","file":"three-map-controls.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = (__webpack_require__(3))(0);","'use strict';\n\n//Alex Pilafian 2016-2019 - sikanrong@gmail.com\n\nimport {\n    Box2,\n    Quaternion,\n    EventDispatcher,\n    Vector2,\n    Vector3,\n    Object3D,\n    Raycaster,\n    Ray,\n    MOUSE\n} from 'three'\n\n//test stubs\nif(typeof window == 'undefined'){\n    let window = require('../test/stub_dom');\n}\n\nclass MapControls extends EventDispatcher{\n\n        constructor(camera, domElement, options){\n            super();\n\n            this.camera = camera;\n\n            //Object to use for listening for keyboard/mouse events\n            this.domElement = ( domElement !== undefined ) ? domElement : window.document.body;\n\n            // Set to false to disable this control (Disables all input events)\n            this.enabled = true;\n\n            // Must be set to instance of Plane or Sphere\n            this.target;\n\n            // How far you can dolly in and out\n            this.minDistance = 1; //probably should never be 0\n            this.maxDistance = 100;\n\n            // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n            // Set to false to disable zooming\n            this.enableZoom = true;\n            this.zoomSpeed = 6.0;\n            this.zoomDampingAlpha = 0.1;\n            this.initialZoom = 0; //start zoomed all the way out unless set in options.\n\n            // Set to false to disable panning\n            this.enablePan = true;\n            this.keyPanSpeed = 12.0;\t// pixels moved per arrow key push\n            this.panDampingAlpha = 0.1;\n\n            // Set to false to disable use of the keys\n            this.enableKeys = true;\n\n            // The four arrow keys\n            this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n            // Mouse buttons\n            this.mouseButtons = { ZOOM: MOUSE.MIDDLE, PAN: MOUSE.LEFT };\n\n\n            \n            //Copy options from parameters\n            Object.assign(this, options);\n            let isTargetValid = false;\n\n            if(this.mode === undefined){\n                throw new Error('\\'mode\\' option must be set to either \\'plane\\' or \\'sphere\\'');\n            }\n\n            switch(this.mode){\n                case 'plane':\n                    isTargetValid = (this.target.normal !== undefined && this.target.constant !== undefined);\n                    break;\n                case 'sphere':\n                    isTargetValid = (this.target.center !== undefined && this.target.radius !== undefined);\n                    break;\n            }\n\n            if(!isTargetValid){\n                throw new Error('\\'target\\' option must be an instance of type THREE.Plane or THREE.Sphere');\n            }\n\n            this._eventListeners = {\n                'contextmenu': this._onContextMenu.bind(this),\n                'mousedown': this._onMouseDown.bind(this),\n                'mousewheel': this._onMouseWheel.bind(this),\n                'MozMousePixelScroll': this._onMouseWheel.bind(this),\n                'touchstart': this._onTouchStart.bind(this),\n                'touchend': this._onTouchEnd.bind(this),\n                'touchmove': this._onTouchMove.bind(this),\n                'keydown': this._onKeyDown.bind(this),\n                'mousemove': this._onMouseMove.bind(this),\n                'mouseup': this._onMouseUp.bind(this)\n            };\n\n            this._init();\n        }\n\n        _init (){\n\n            this.target0 = this.target.clone();\n            this.position0 = this.camera.position.clone();\n            this.zoom0 = this.camera.zoom;\n            this._changeEvent = { type: 'change' };\n            this._startEvent = { type: 'start' };\n            this._endEvent = { type: 'end' };\n\n            this._STATES = { NONE : - 1, DOLLY : 1, PAN : 2, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n            if(this.target.distanceToPoint(this.camera.position) == 0){\n                throw new Error(\"ORIENTATION_UNKNOWABLE: initial Camera position cannot intersect target plane.\");\n            }\n\n            this._state = this._STATES.NONE;\n\n            this._mouse = new Vector2();\n\n            this._finalTargetDistance = 0;\n            this._currentTargetDistance = 0;\n\n            this._panTarget = new Vector3(0,0,0);\n            this._panCurrent = new Vector3(0,0,0);\n\n            this._minZoomPosition = new Vector3();\n            this._maxZoomPosition = new Vector3();\n\n            this._panStart = new Vector2();\n            this._panEnd = new Vector2();\n            this._panDelta = new Vector2();\n\n            this._dollyStart = new Vector2();\n            this._dollyEnd = new Vector2();\n            this._dollyDelta = new Vector2();\n\n            this._camOrientation = new Vector2();\n\n            this._zoomAlpha;\n\n            this._screenWorldXform = Math.tan( ( this.camera.fov / 2 ) * Math.PI / 180.0 );\n\n            //establish initial camera orientation based on position w.r.t. _this.target plane\n            this._straightDollyTrack();\n\n            this.camera.position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this.initialZoom);\n            this._finalTargetDistance = this._currentTargetDistance = Math.abs(this.target.distanceToPoint(this.camera.position));\n\n            const res = this._intersectCameraTarget();\n            this.camera.lookAt(res.intersection); //set the orientation of the camera towards the map.\n            this._camOrientation = res.ray.direction.clone().normalize();\n\n            this._updateZoomAlpha();\n\n            //Assign event listeners\n\n            [\n                'contextmenu',\n                'mousedown',\n                'mousewheel',\n                'MozMousePixelScroll',\n                'touchstart',\n                'touchend',\n                'touchmove',\n                'keydown'\n            ].forEach(_e => {\n                this.domElement.addEventListener(_e, this._eventListeners[_e]);\n            });\n\n\n            this.update();\n        }\n\n        _intersectCameraTarget(){\n            let intersection = new Vector3();\n            let ray;\n\n            switch(this.mode){\n                case 'plane':\n                    const coplanar = new Vector3();\n                    this.target.projectPoint(this.camera.position, coplanar);\n                    ray = new Ray(this.camera.position, new Vector3().subVectors(coplanar, this.camera.position).normalize());\n                    ray.intersectPlane(this.target, intersection);\n                    break;\n                case 'sphere':\n                    ray = new Ray(this.camera.position, (new Vector3()).subVectors(this.target.center, this.camera.position).normalize());\n                    ray.intersectSphere(this.target, intersection);\n                    break;\n            }\n\n            return {\n                intersection: intersection,\n                ray: ray\n            }\n        }\n\n        _straightDollyTrack(){\n            this._updateDollyTrack(this._intersectCameraTarget().ray);\n        }\n\n        getZoomAlpha () {\n            return this._zoomAlpha;\n        }\n\n        reset () {\n\n            this.target.copy( this.target0 );\n            this.camera.position.copy( this.position0 );\n            this.camera.zoom = this.zoom0;\n\n            this.camera.updateProjectionMatrix();\n\n            this._init(); //reinit\n\n            this.dispatchEvent( this._changeEvent );\n\n            this.update();\n\n            this._state = this._STATES.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        update () {\n            const panDelta = new Vector3();\n            const oldPanCurrent = new Vector3();\n            const position = this.camera.position;\n\n            // move target to panned location\n            oldPanCurrent.copy(this._panCurrent);\n            this._panCurrent.lerp( this._panTarget, this.panDampingAlpha );\n            panDelta.subVectors(this._panCurrent, oldPanCurrent);\n\n            switch (this.mode) {\n                case 'plane':\n                    this._maxZoomPosition.add(panDelta);\n                    this._minZoomPosition.add(panDelta);\n                    break;\n                case 'sphere':\n                    const v = new Vector3();\n                    const quat = new Quaternion();\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 1 ), panDelta.x);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 0 ), panDelta.y);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    //panDelta.z is only used for zoomToFit\n                    //all pan operations rotate around the camera's MatrixColumn axes, while zoomToFit needs to\n                    //rotate about the world Y-axis\n                    quat.setFromAxisAngle(new Vector3(0,1,0), panDelta.z);\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    break;\n            }\n\n            position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this._updateZoomAlpha());\n\n            if(this.mode == 'sphere'){\n                this.camera.lookAt(this.target.center);\n            }\n        }\n\n        dispose () {\n            Object.keys(this._eventListeners).forEach(_e =>{\n                this.domElement.removeEventListener(_e, this._eventListeners[_e], false);\n            });\n        };\n\n        zoomToFit (mesh, center, dims){\n\n            if(center === undefined){\n                center = mesh.geometry.boundingSphere.center.clone();\n            }\n\n            center = mesh.localToWorld(center.clone());\n\n            if(dims === undefined){\n                const diameter = (mesh.geometry.boundingSphere.radius * 2);\n                dims = new Vector2(\n                    diameter,\n                    diameter\n                );\n            }\n\n            switch(this.mode){\n                case 'plane':\n                    this._panTarget.copy(center);\n                    this._panCurrent.copy(this._intersectCameraTarget().intersection);\n                    break;\n                case 'sphere':\n                    const targetCoord = this._sphericalCoordinatesFrom(center);\n                    const camCoord = this._sphericalCoordinatesFrom(this.camera.position);\n                    const delta = new Vector2().subVectors(targetCoord, camCoord);\n\n                    //Handle wrapping around the antimeridian; the line of 2π (or 0) radians\n                    if(Math.abs(delta.x) > Math.PI){\n                        delta.x = (-Math.abs(delta.x) / delta.x) * ((Math.PI * 2) - Math.abs(delta.x));\n                    }\n\n                    this._panTarget.add(new Vector3(0, -delta.y, delta.x));\n                    break;\n            }\n\n            this._straightDollyTrack();\n\n            const vFOV = this.camera.fov * (Math.PI / 180);\n            const hFOV = 2 * Math.atan( Math.tan( vFOV / 2 ) * this.camera.aspect );\n            const obj_aspect = dims.x / dims.y;\n\n            this._finalTargetDistance = ((((obj_aspect > this.camera.aspect)? dims.x : dims.y) / 2) / Math.tan(((obj_aspect > this.camera.aspect)? hFOV : vFOV) / 2));\n\n\n        };\n\n        //returns a bounding box denoting the visible target area\n        targetAreaVisible(){\n\n            let bbox, vOffset, hOffset, center;\n\n            switch(this.mode){\n                case 'plane':\n                    var ray = new Ray(this.camera.position, this._camOrientation);\n                    var depth = ray.distanceToPlane(this.target);\n\n                    center = this.camera.position.clone();\n\n                    vOffset = this._screenWorldXform * depth;\n                    hOffset = vOffset * this.camera.aspect;\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset, center.y - vOffset),\n                        new Vector2(center.x + hOffset, center.y + vOffset)\n                    );\n\n                    break;\n                case 'sphere':\n                    const cam_pos = (new Vector3()).subVectors(this.target.center, this.camera.position);\n                    center = this._sphericalCoordinatesFrom(this.camera.position);\n\n                    const halfPi = Math.PI / 2;\n\n                    const d = cam_pos.length();\n\n                    //Derived from solving the Haversine formula for Phi_2 when all other variables\n                    //(d, r, Theta_1, Theta_2, Phi_1) are given\n                    vOffset = this._screenWorldXform * ((d / this.target.radius) - 1);\n                    vOffset = Math.min(vOffset, halfPi);\n\n                    //Account for the aspect ratio of the screen, and the deformation of the sphere\n                    const r = this.target.radius * Math.cos(center.y - halfPi);\n                    hOffset = vOffset * this.camera.aspect * ( this.target.radius / r);\n                    hOffset = Math.min(hOffset, halfPi);\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset - halfPi, center.y - vOffset - halfPi),\n                        new Vector2(center.x + hOffset - halfPi, center.y + vOffset - halfPi)\n                    );\n\n                    ['min', 'max'].forEach(_mm => {\n                        bbox[_mm].x = (bbox[_mm].x > Math.PI)? (-2*Math.PI + bbox[_mm].x): bbox[_mm].x;\n                    });\n\n                    break;\n            };\n\n            return bbox;\n        }\n\n        _sphericalCoordinatesFrom (cartesian_vec) {\n            const rel_pos = ((new Vector3()).subVectors(this.target.center, cartesian_vec));\n            const rel_xzcomponent = new Vector3(rel_pos.x, 0, rel_pos.z);\n\n            const v = new Vector3();\n            const sphCoord = new Vector2(\n                rel_xzcomponent.angleTo(new Vector3(1,0,0)),\n                rel_pos.angleTo(new Vector3(0,1,0))\n            );\n            sphCoord.x = (rel_pos.z > 0)? (2*Math.PI - sphCoord.x) : sphCoord.x;\n            return sphCoord;\n        }\n\n        _updateZoomAlpha(){\n            this._finalTargetDistance = Math.max( this.minDistance, Math.min( this.maxDistance, this._finalTargetDistance ) );\n            var diff = this._currentTargetDistance - this._finalTargetDistance;\n            var damping_alpha = this.zoomDampingAlpha;\n            this._currentTargetDistance -= diff * damping_alpha;\n            var rounding_places = 100000;\n            this._zoomAlpha = Math.abs(Math.round((1 - ((this._currentTargetDistance - this.minDistance) / (this.maxDistance - this.minDistance))) * rounding_places ) / rounding_places);\n\n            return this._zoomAlpha;\n        }\n\n        _updateDollyTrack(ray){\n            let intersect = new Vector3();\n\n            switch(this.mode){\n                case 'plane':\n                    ray.intersectPlane(this.target, intersect);\n                    break;\n                case 'sphere':\n                    ray.intersectSphere(this.target, intersect);\n                    break;\n            }\n\n            if(intersect){\n                this._maxZoomPosition.addVectors(intersect, new Vector3().subVectors(this.camera.position, intersect).normalize().multiplyScalar(this.minDistance));\n                this._minZoomPosition.copy(this._calculateMinZoom(this.camera.position, intersect));\n\n                this._finalTargetDistance = this._currentTargetDistance = intersect.clone().sub(this.camera.position).length();\n            }\n        }\n\n        _getZoomScale() {\n            return Math.pow( 0.95, this.zoomSpeed );\n        }\n\n\n        _panLeft( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(- distance, 0, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 0 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( - distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        _panUp ( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(0, - distance, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 1 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        _pan (deltaX, deltaY) {\n            var element = this.domElement;\n\n            var r = new Ray(this.camera.position, this._camOrientation);\n            var targetDistance;\n\n            switch(this.mode){\n                case 'plane':\n                    targetDistance = this._screenWorldXform * r.distanceToPlane(this.target);\n                    break;\n                case 'sphere':\n                    //in spherical mode the pan coords are saved as radians and used as rotation angles\n                    const camToTarget = (new Vector3()).subVectors(this.camera.position, this.target.center);\n                    targetDistance = this._screenWorldXform * ((camToTarget.length() / this.target.radius) - 1);\n                    break;\n            }\n\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\n            this._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.camera.matrix );\n            this._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.camera.matrix );\n\n        }\n\n        _dollyIn( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance /= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _dollyOut( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance *= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _cameraOfKnownType() {\n            return this.camera.type === 'PerspectiveCamera'\n        }\n\n        _handleUpdateDollyTrackMouse(event){\n            var prevMouse = this._mouse.clone();\n            this._mouse.set(( event.offsetX / this.domElement.clientWidth ) * 2 - 1, - ( event.offsetY / this.domElement.clientHeight ) * 2 + 1);\n\n            if(!prevMouse.equals(this._mouse)){\n                var rc = new Raycaster();\n                rc.setFromCamera(this._mouse, this.camera);\n                this._updateDollyTrack(rc.ray);\n            }\n        }\n\n        _handleMouseDownDolly( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n            this._dollyStart.set( event.offsetX, event.offsetY );\n        }\n\n        _handleMouseDownPan( event ) {\n\n            this._panStart.set( event.offsetX, event.offsetY );\n\n        }\n\n        _handleMouseMoveDolly( event ) {\n\n            this._handleUpdateDollyTrackMouse(event);\n\n            //console.log( 'handleMouseMoveDolly' );\n\n            this._dollyEnd.set( event.offsetX, event.offsetY );\n\n            this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseMovePan( event ) {\n\n            //console.log( 'handleMouseMovePan' );\n\n            this._panEnd.set( event.offsetX, event.offsetY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseUp( event ) {\n\n            //console.log( 'handleMouseUp' );\n\n        }\n\n        _calculateMinZoom(cam_pos, map_intersect){\n            return map_intersect.clone().add(\n                cam_pos.clone()\n                .sub(map_intersect)\n                .normalize()\n                .multiplyScalar(this.maxDistance)\n            );\n        }\n\n\n        _handleMouseWheel( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n\n            var delta = 0;\n\n            if ( event.wheelDelta !== undefined ) {\n\n                // WebKit / Opera / Explorer 9\n\n                delta = event.wheelDelta;\n\n            } else if ( event.detail !== undefined ) {\n\n                // Firefox\n\n                delta = - event.detail;\n\n            }\n\n            if ( delta > 0 ) {\n                this._dollyOut( this._getZoomScale() );\n            } else if ( delta < 0 ) {\n                this._dollyIn( this._getZoomScale() );\n            }\n\n            this.update();\n        }\n\n        _handleKeyDown( event ) {\n\n            //console.log( 'handleKeyDown' );\n\n            switch ( event.keyCode ) {\n\n                case this.keys.UP:\n                    this._pan( 0, this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.BOTTOM:\n                    this._pan( 0, - this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.LEFT:\n                    this._pan( this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n                case this.keys.RIGHT:\n                    this._pan( - this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n            }\n        }\n\n        _handleUpdateDollyTrackTouch( event ){\n            var centerpoint = new Vector2();\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            centerpoint.x = event.touches[ 0 ].pageX + (dx / 2);\n            centerpoint.y = event.touches[ 0 ].pageY + (dy / 2);\n\n            var mouse = new Vector2();\n            mouse.x = ( centerpoint.x / domElement.clientWidth ) * 2 - 1;\n            mouse.y = - ( centerpoint.y / domElement.clientHeight ) * 2 + 1;\n\n            this._updateDollyTrack(mouse);\n        }\n\n        _handleTouchStartDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyStart.set( 0, distance );\n\n        }\n\n        _handleTouchStartPan( event ) {\n\n            //console.log( 'handleTouchStartPan' );\n\n            this._panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n        }\n\n\n        _handleTouchMoveDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            //console.log( 'handleTouchMoveDolly' );\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyEnd.set( 0, distance );\n\n            this._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchMovePan( event ) {\n\n            this._panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchEnd( event ) {\n            //console.log( 'handleTouchEnd' );\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        _onMouseDown( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( event.button === this.mouseButtons.ZOOM ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseDownDolly( event );\n\n                this._state = this._STATES.DOLLY;\n\n            } else if ( event.button === this.mouseButtons.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseDownPan( event );\n\n                this._state = this._STATES.PAN;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                this.domElement.addEventListener( 'mousemove', this._eventListeners.mousemove, false );\n                this.domElement.addEventListener( 'mouseup', this._eventListeners.mouseup, false );\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onMouseMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( this._state === this._STATES.DOLLY ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseMoveDolly( event );\n\n            } else if ( this._state === this._STATES.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseMovePan( event );\n            }\n        }\n\n        _onMouseUp( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleMouseUp( event );\n\n            this.domElement.removeEventListener( 'mousemove', this._eventListeners.mousemove, false );\n            this.domElement.removeEventListener( 'mouseup', this._eventListeners.mouseup, false );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onMouseWheel( event ) {\n            if ( this.enabled === false || this.enableZoom === false || ( this._state !== this._STATES.NONE ) ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            this._handleMouseWheel( event );\n\n            this.dispatchEvent( this._startEvent ); // not sure why these are here...\n            this.dispatchEvent( this._endEvent );\n\n        }\n\n        _onKeyDown( event ) {\n\n            if ( this.enabled === false || this.enableKeys === false || this.enablePan === false ) return;\n\n            this._handleKeyDown( event );\n\n        }\n\n        _onTouchStart( event ) {\n\n            if ( this.enabled === false ) return;\n\n            switch ( event.touches.length ) {\n                case 1: // three-fingered touch: pan\n\n                    if ( this.enablePan === false ) return;\n\n                    this._handleTouchStartPan( event );\n\n                    this._state = this._STATES.TOUCH_PAN;\n\n                    break;\n\n                case 2:\t// two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n\n                    this._handleTouchStartDolly( event );\n\n                    this._state = this._STATES.TOUCH_DOLLY;\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onTouchMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            switch ( event.touches.length ) {\n\n                case 1: // one-fingered touch: pan\n                    if ( this.enablePan === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_PAN ) return; // is this needed?...\n\n                    this._handleTouchMovePan( event );\n\n                    break;\n\n                case 2: // two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_DOLLY ) return; // is this needed?...\n\n                    this._handleTouchMoveDolly( event );\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n        }\n\n        _onTouchEnd( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleTouchEnd( event );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onContextMenu( event ) {\n            event.preventDefault();\n        }\n\n};\n\nexport default MapControls;\n","module.exports = {\n    console: {\n        log: function () {}\n    },\n    document: {\n        body: {\n            clientWidth: 1920,\n            clientHeight: 1080,\n            addEventListener: function () {},\n            removeEventListener: function () {}\n        }\n    }\n};\n","module.exports = vendor;"],"sourceRoot":""}