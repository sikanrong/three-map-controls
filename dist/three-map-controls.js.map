{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///delegated ./node_modules/three/build/three.module.js from dll-reference vendor","webpack:///./test/stub_dom.js","webpack:///external \"vendor\"","webpack:///./src/three-map-controls.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","console","log","document","body","clientWidth","clientHeight","addEventListener","removeEventListener","vendor","__webpack_exports__","three__WEBPACK_IMPORTED_MODULE_0__","window","require","MapControls","EventDispatcher","constructor","camera","domElement","options","super","this","undefined","enabled","target","minDistance","maxDistance","enableZoom","zoomSpeed","zoomDampingAlpha","initialZoom","enablePan","keyPanSpeed","panDampingAlpha","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ZOOM","MOUSE","MIDDLE","PAN","assign","isTargetValid","mode","Error","normal","constant","center","radius","_eventListeners","contextmenu","_onContextMenu","bind","mousedown","_onMouseDown","mousewheel","_onMouseWheel","MozMousePixelScroll","touchstart","_onTouchStart","touchend","_onTouchEnd","touchmove","_onTouchMove","keydown","_onKeyDown","mousemove","_onMouseMove","mouseup","_onMouseUp","_init","target0","clone","position0","position","zoom0","zoom","_changeEvent","type","_startEvent","_endEvent","_STATES","NONE","DOLLY","TOUCH_DOLLY","TOUCH_PAN","distanceToPoint","_state","_mouse","Vector2","_finalTargetDistance","_currentTargetDistance","_panTarget","Vector3","_panCurrent","_minZoomPosition","_maxZoomPosition","_panStart","_panEnd","_panDelta","_dollyStart","_dollyEnd","_dollyDelta","_camOrientation","_zoomAlpha","_screenWorldXform","Math","tan","fov","PI","_straightDollyTrack","lerpVectors","abs","res","_intersectCameraTarget","lookAt","intersection","ray","direction","normalize","_updateZoomAlpha","forEach","_e","update","coplanar","projectPoint","Ray","subVectors","intersectPlane","intersectSphere","_updateDollyTrack","getZoomAlpha","reset","copy","updateProjectionMatrix","dispatchEvent","panDelta","oldPanCurrent","lerp","add","v","quat","Quaternion","setFromAxisAngle","setFromMatrixColumn","matrix","x","applyQuaternion","y","dispose","zoomToFit","mesh","width","height","geometry","boundingSphere","localToWorld","vFOV","hFOV","atan","aspect","obj_aspect","targetAreaVisible","bbox","vOffset","hOffset","depth","distanceToPlane","Box2","cam_pos","cam_xpos","z","halfPi","angleTo","length","min","cos","_mm","max","diff","damping_alpha","round","intersect","addVectors","multiplyScalar","_calculateMinZoom","sub","_getZoomScale","pow","_panLeft","distance","cameraMatrix","set","_panUp","_pan","deltaX","deltaY","targetDistance","element","camToTarget","_dollyIn","dollyScale","_cameraOfKnownType","warn","_dollyOut","_handleUpdateDollyTrackMouse","event","prevMouse","offsetX","offsetY","equals","rc","Raycaster","setFromCamera","_handleMouseDownDolly","_handleMouseDownPan","_handleMouseMoveDolly","_handleMouseMovePan","_handleMouseUp","map_intersect","_handleMouseWheel","delta","wheelDelta","detail","_handleKeyDown","keyCode","_handleUpdateDollyTrackTouch","centerpoint","dx","touches","pageX","dy","pageY","mouse","_handleTouchStartDolly","sqrt","_handleTouchStartPan","_handleTouchMoveDolly","_handleTouchMovePan","_handleTouchEnd","preventDefault","button","stopPropagation"],"mappings":"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","file":"three-map-controls.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = (__webpack_require__(2))(0);","module.exports = {\n    console: {\n        log: function () {}\n    },\n    document: {\n        body: {\n            clientWidth: 1920,\n            clientHeight: 1080,\n            addEventListener: function () {},\n            removeEventListener: function () {}\n        }\n    }\n};\n","module.exports = vendor;","'use strict';\n\n//Alex Pilafian 2016-2019 - sikanrong@gmail.com\n\nimport {Box2, Quaternion, EventDispatcher, Vector2, Vector3, Raycaster, Ray, MOUSE} from 'three'\n\n//test stubs\nif(typeof window == 'undefined'){\n    let window = require('../test/stub_dom');\n}\n\nclass MapControls extends EventDispatcher{\n\n        constructor(camera, domElement, options){\n            super();\n\n            this.camera = camera;\n\n            //Object to use for listening for keyboard/mouse events\n            this.domElement = ( domElement !== undefined ) ? domElement : window.document.body;\n\n            // Set to false to disable this control (Disables all input events)\n            this.enabled = true;\n\n            // Must be set to instance of Plane or Sphere\n            this.target;\n\n            // How far you can dolly in and out\n            this.minDistance = 1; //probably should never be 0\n            this.maxDistance = 100;\n\n            // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n            // Set to false to disable zooming\n            this.enableZoom = true;\n            this.zoomSpeed = 6.0;\n            this.zoomDampingAlpha = 0.1;\n            this.initialZoom = 0; //start zoomed all the way out unless set in options.\n\n            // Set to false to disable panning\n            this.enablePan = true;\n            this.keyPanSpeed = 12.0;\t// pixels moved per arrow key push\n            this.panDampingAlpha = 0.1;\n\n            // Set to false to disable use of the keys\n            this.enableKeys = true;\n\n            // The four arrow keys\n            this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n            // Mouse buttons\n            this.mouseButtons = { ZOOM: MOUSE.MIDDLE, PAN: MOUSE.LEFT };\n\n\n            \n            //Copy options from parameters\n            Object.assign(this, options);\n            let isTargetValid = false;\n\n            if(this.mode === undefined){\n                throw new Error('\\'mode\\' option must be set to either \\'plane\\' or \\'sphere\\'');\n            }\n\n            switch(this.mode){\n                case 'plane':\n                    isTargetValid = (this.target.normal !== undefined && this.target.constant !== undefined);\n                    break;\n                case 'sphere':\n                    isTargetValid = (this.target.center !== undefined && this.target.radius !== undefined);\n                    break;\n            }\n\n            if(!isTargetValid){\n                throw new Error('\\'target\\' option must be an instance of type THREE.Plane or THREE.Sphere');\n            }\n\n            this._eventListeners = {\n                'contextmenu': this._onContextMenu.bind(this),\n                'mousedown': this._onMouseDown.bind(this),\n                'mousewheel': this._onMouseWheel.bind(this),\n                'MozMousePixelScroll': this._onMouseWheel.bind(this),\n                'touchstart': this._onTouchStart.bind(this),\n                'touchend': this._onTouchEnd.bind(this),\n                'touchmove': this._onTouchMove.bind(this),\n                'keydown': this._onKeyDown.bind(this),\n                'mousemove': this._onMouseMove.bind(this),\n                'mouseup': this._onMouseUp.bind(this)\n            };\n\n            this._init();\n        }\n\n        _init (){\n\n            this.target0 = this.target.clone();\n            this.position0 = this.camera.position.clone();\n            this.zoom0 = this.camera.zoom;\n            this._changeEvent = { type: 'change' };\n            this._startEvent = { type: 'start' };\n            this._endEvent = { type: 'end' };\n\n            this._STATES = { NONE : - 1, DOLLY : 1, PAN : 2, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n            if(this.target.distanceToPoint(this.camera.position) == 0){\n                throw new Error(\"ORIENTATION_UNKNOWABLE: initial Camera position cannot intersect target plane.\");\n            }\n\n            this._state = this._STATES.NONE;\n\n            this._mouse = new Vector2();\n\n            this._finalTargetDistance = 0;\n            this._currentTargetDistance = 0;\n\n            this._panTarget = new Vector3();\n            this._panCurrent = new Vector3();\n\n            this._minZoomPosition = new Vector3();\n            this._maxZoomPosition = new Vector3();\n\n            this._panStart = new Vector2();\n            this._panEnd = new Vector2();\n            this._panDelta = new Vector2();\n\n            this._dollyStart = new Vector2();\n            this._dollyEnd = new Vector2();\n            this._dollyDelta = new Vector2();\n\n            this._camOrientation = new Vector2();\n\n            this._zoomAlpha;\n\n            this._screenWorldXform = Math.tan( ( this.camera.fov / 2 ) * Math.PI / 180.0 );\n\n            //establish initial camera orientation based on position w.r.t. _this.target plane\n            this._straightDollyTrack();\n\n            this.camera.position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this.initialZoom);\n            this._finalTargetDistance = this._currentTargetDistance = Math.abs(this.target.distanceToPoint(this.camera.position));\n\n            const res = this._intersectCameraTarget();\n            this.camera.lookAt(res.intersection); //set the orientation of the camera towards the map.\n            this._camOrientation = res.ray.direction.clone().normalize();\n\n            this._updateZoomAlpha();\n\n            //Assign event listeners\n\n            [\n                'contextmenu',\n                'mousedown',\n                'mousewheel',\n                'MozMousePixelScroll',\n                'touchstart',\n                'touchend',\n                'touchmove',\n                'keydown'\n            ].forEach(_e => {\n                this.domElement.addEventListener(_e, this._eventListeners[_e]);\n            });\n\n\n            this.update();\n        }\n\n        _intersectCameraTarget(){\n            let intersection = new Vector3();\n            let ray;\n\n            switch(this.mode){\n                case 'plane':\n                    const coplanar = new Vector3();\n                    this.target.projectPoint(this.camera.position, coplanar);\n                    ray = new Ray(this.camera.position, new Vector3().subVectors(coplanar, this.camera.position).normalize());\n                    ray.intersectPlane(this.target, intersection);\n                    break;\n                case 'sphere':\n                    ray = new Ray(this.camera.position, (new Vector3()).subVectors(this.target.center, this.camera.position).normalize());\n                    ray.intersectSphere(this.target, intersection);\n                    break;\n            }\n\n            return {\n                intersection: intersection,\n                ray: ray\n            }\n        }\n\n        _straightDollyTrack(){\n            this._updateDollyTrack(this._intersectCameraTarget().ray);\n        }\n\n        getZoomAlpha () {\n            return this._zoomAlpha;\n        }\n\n        reset () {\n\n            this.target.copy( this.target0 );\n            this.camera.position.copy( this.position0 );\n            this.camera.zoom = this.zoom0;\n\n            this.camera.updateProjectionMatrix();\n\n            this._init(); //reinit\n\n            this.dispatchEvent( this._changeEvent );\n\n            this.update();\n\n            this._state = this._STATES.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        update () {\n            var panDelta = new Vector3();\n            var oldPanCurrent = new Vector3();\n            var position = this.camera.position;\n\n            // move target to panned location\n            oldPanCurrent.copy(this._panCurrent);\n            this._panCurrent.lerp( this._panTarget, this.panDampingAlpha );\n            panDelta.subVectors(this._panCurrent, oldPanCurrent);\n\n            switch (this.mode) {\n                case 'plane':\n                    this._maxZoomPosition.add(panDelta);\n                    this._minZoomPosition.add(panDelta);\n                    break;\n                case 'sphere':\n                    const v = new Vector3();\n                    const quat = new Quaternion();\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 1 ), panDelta.x);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 0 ), panDelta.y);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    break;\n            }\n\n            position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this._updateZoomAlpha());\n\n            if(this.mode == 'sphere'){\n                this.camera.lookAt(this.target.center);\n            }\n        }\n\n        dispose () {\n            Object.keys(this._eventListeners).forEach(_e =>{\n                this.domElement.removeEventListener(_e, this._eventListeners[_e], false);\n            });\n        };\n\n        zoomToFit (mesh, center, width, height){\n            //if only width is passed interpret it as radius and set height equal to width\n            center = center || mesh.geometry.boundingSphere.center;\n            width = width || (mesh.geometry.boundingSphere.radius * 2);\n\n            if(height === undefined)\n                height = width;\n\n            this._panTarget.copy(mesh.localToWorld(center.clone()));\n            this._panCurrent.copy(this._intersectCameraTarget().intersection);\n\n            this._straightDollyTrack();\n\n            var vFOV = this.camera.fov * (Math.PI / 180);\n            var hFOV = 2 * Math.atan( Math.tan( vFOV / 2 ) * this.camera.aspect );\n            var obj_aspect = width / height;\n\n            this._finalTargetDistance = ((((obj_aspect > this.camera.aspect)? width : height) / 2) / Math.tan(((obj_aspect > this.camera.aspect)? hFOV : vFOV) / 2));\n\n\n        };\n\n        //returns a bounding box denoting the visible target area\n        targetAreaVisible(){\n\n            let bbox, vOffset, hOffset, center;\n\n            switch(this.mode){\n                case 'plane':\n                    var ray = new Ray(this.camera.position, this._camOrientation);\n                    var depth = ray.distanceToPlane(this.target);\n\n                    center = this.camera.position.clone();\n\n                    vOffset = this._screenWorldXform * depth;\n                    hOffset = vOffset * this.camera.aspect;\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset, center.y - vOffset),\n                        new Vector2(center.x + hOffset, center.y + vOffset)\n                    );\n\n                    break;\n                case 'sphere':\n\n                    const cam_pos = ((new Vector3()).subVectors(this.target.center, this.camera.position));\n                    const cam_xpos = new Vector3(cam_pos.x, 0, cam_pos.z);\n\n                    const halfPi = Math.PI / 2;\n\n                    center = new Vector2(\n                        cam_xpos.angleTo(new Vector3(1,0,0)),\n                        cam_pos.angleTo(new Vector3(0,1,0))\n                    );\n\n                    center.x = (this.camera.position.z < 0)? (2*Math.PI - center.x) : center.x;\n\n                    const d = cam_pos.length();\n\n                    //Derived from solving the Haversine formula for Phi_2 when all other variables\n                    //(d, r, Theta_1, Theta_2, Phi_1) are given\n                    vOffset = this._screenWorldXform * ((d / this.target.radius) - 1);\n                    vOffset = Math.min(vOffset, halfPi);\n\n                    //Account for the aspect ratio of the screen, and the deformation of the sphere\n                    const r = this.target.radius * Math.cos(center.y - halfPi);\n                    hOffset = vOffset * this.camera.aspect * ( this.target.radius / r);\n                    hOffset = Math.min(hOffset, halfPi);\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset - halfPi, center.y - vOffset - halfPi),\n                        new Vector2(center.x + hOffset - halfPi, center.y + vOffset - halfPi)\n                    );\n\n                    ['min', 'max'].forEach(_mm => {\n                        bbox[_mm].x = (bbox[_mm].x > Math.PI)? (-2*Math.PI + bbox[_mm].x): bbox[_mm].x;\n                    });\n\n                    break;\n            };\n\n            return bbox;\n        }\n\n        _updateZoomAlpha(){\n            this._finalTargetDistance = Math.max( this.minDistance, Math.min( this.maxDistance, this._finalTargetDistance ) );\n            var diff = this._currentTargetDistance - this._finalTargetDistance;\n            var damping_alpha = this.zoomDampingAlpha;\n            this._currentTargetDistance -= diff * damping_alpha;\n            var rounding_places = 100000;\n            this._zoomAlpha = Math.abs(Math.round((1 - ((this._currentTargetDistance - this.minDistance) / (this.maxDistance - this.minDistance))) * rounding_places ) / rounding_places);\n\n            return this._zoomAlpha;\n        }\n\n        _updateDollyTrack(ray){\n            let intersect = new Vector3();\n\n            switch(this.mode){\n                case 'plane':\n                    ray.intersectPlane(this.target, intersect);\n                    break;\n                case 'sphere':\n                    ray.intersectSphere(this.target, intersect);\n                    break;\n            }\n\n            if(intersect){\n                this._maxZoomPosition.addVectors(intersect, new Vector3().subVectors(this.camera.position, intersect).normalize().multiplyScalar(this.minDistance));\n                this._minZoomPosition.copy(this._calculateMinZoom(this.camera.position, intersect));\n\n                this._finalTargetDistance = this._currentTargetDistance = intersect.clone().sub(this.camera.position).length();\n            }\n        }\n\n        _getZoomScale() {\n            return Math.pow( 0.95, this.zoomSpeed );\n        }\n\n\n        _panLeft( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(- distance, 0, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 0 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( - distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        _panUp ( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(0, - distance, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 1 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        _pan (deltaX, deltaY) {\n            var element = this.domElement;\n\n            var r = new Ray(this.camera.position, this._camOrientation);\n            var targetDistance;\n\n            switch(this.mode){\n                case 'plane':\n                    targetDistance = this._screenWorldXform * r.distanceToPlane(this.target);\n                    break;\n                case 'sphere':\n                    //in spherical mode the pan coords are saved as radians and used as rotation angles\n                    const camToTarget = (new Vector3()).subVectors(this.camera.position, this.target.center);\n                    targetDistance = this._screenWorldXform * ((camToTarget.length() / this.target.radius) - 1);\n                    break;\n            }\n\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\n            this._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.camera.matrix );\n            this._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.camera.matrix );\n\n        }\n\n        _dollyIn( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance /= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _dollyOut( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance *= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _cameraOfKnownType() {\n            return this.camera.type === 'PerspectiveCamera'\n        }\n\n        _handleUpdateDollyTrackMouse(event){\n            var prevMouse = this._mouse.clone();\n            this._mouse.set(( event.offsetX / this.domElement.clientWidth ) * 2 - 1, - ( event.offsetY / this.domElement.clientHeight ) * 2 + 1);\n\n            if(!prevMouse.equals(this._mouse)){\n                var rc = new Raycaster();\n                rc.setFromCamera(this._mouse, this.camera);\n                this._updateDollyTrack(rc.ray);\n            }\n        }\n\n        _handleMouseDownDolly( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n            this._dollyStart.set( event.offsetX, event.offsetY );\n        }\n\n        _handleMouseDownPan( event ) {\n\n            this._panStart.set( event.offsetX, event.offsetY );\n\n        }\n\n        _handleMouseMoveDolly( event ) {\n\n            this._handleUpdateDollyTrackMouse(event);\n\n            //console.log( 'handleMouseMoveDolly' );\n\n            this._dollyEnd.set( event.offsetX, event.offsetY );\n\n            this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseMovePan( event ) {\n\n            //console.log( 'handleMouseMovePan' );\n\n            this._panEnd.set( event.offsetX, event.offsetY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseUp( event ) {\n\n            //console.log( 'handleMouseUp' );\n\n        }\n\n        _calculateMinZoom(cam_pos, map_intersect){\n            return map_intersect.clone().add(\n                cam_pos.clone()\n                .sub(map_intersect)\n                .normalize()\n                .multiplyScalar(this.maxDistance)\n            );\n        }\n\n\n        _handleMouseWheel( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n\n            var delta = 0;\n\n            if ( event.wheelDelta !== undefined ) {\n\n                // WebKit / Opera / Explorer 9\n\n                delta = event.wheelDelta;\n\n            } else if ( event.detail !== undefined ) {\n\n                // Firefox\n\n                delta = - event.detail;\n\n            }\n\n            if ( delta > 0 ) {\n                this._dollyOut( this._getZoomScale() );\n            } else if ( delta < 0 ) {\n                this._dollyIn( this._getZoomScale() );\n            }\n\n            this.update();\n        }\n\n        _handleKeyDown( event ) {\n\n            //console.log( 'handleKeyDown' );\n\n            switch ( event.keyCode ) {\n\n                case this.keys.UP:\n                    this._pan( 0, this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.BOTTOM:\n                    this._pan( 0, - this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.LEFT:\n                    this._pan( this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n                case this.keys.RIGHT:\n                    this._pan( - this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n            }\n        }\n\n        _handleUpdateDollyTrackTouch( event ){\n            var centerpoint = new Vector2();\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            centerpoint.x = event.touches[ 0 ].pageX + (dx / 2);\n            centerpoint.y = event.touches[ 0 ].pageY + (dy / 2);\n\n            var mouse = new Vector2();\n            mouse.x = ( centerpoint.x / domElement.clientWidth ) * 2 - 1;\n            mouse.y = - ( centerpoint.y / domElement.clientHeight ) * 2 + 1;\n\n            this._updateDollyTrack(mouse);\n        }\n\n        _handleTouchStartDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyStart.set( 0, distance );\n\n        }\n\n        _handleTouchStartPan( event ) {\n\n            //console.log( 'handleTouchStartPan' );\n\n            this._panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n        }\n\n\n        _handleTouchMoveDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            //console.log( 'handleTouchMoveDolly' );\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyEnd.set( 0, distance );\n\n            this._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchMovePan( event ) {\n\n            this._panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchEnd( event ) {\n            //console.log( 'handleTouchEnd' );\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        _onMouseDown( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( event.button === this.mouseButtons.ZOOM ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseDownDolly( event );\n\n                this._state = this._STATES.DOLLY;\n\n            } else if ( event.button === this.mouseButtons.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseDownPan( event );\n\n                this._state = this._STATES.PAN;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                this.domElement.addEventListener( 'mousemove', this._eventListeners.mousemove, false );\n                this.domElement.addEventListener( 'mouseup', this._eventListeners.mouseup, false );\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onMouseMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( this._state === this._STATES.DOLLY ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseMoveDolly( event );\n\n            } else if ( this._state === this._STATES.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseMovePan( event );\n            }\n        }\n\n        _onMouseUp( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleMouseUp( event );\n\n            this.domElement.removeEventListener( 'mousemove', this._eventListeners.mousemove, false );\n            this.domElement.removeEventListener( 'mouseup', this._eventListeners.mouseup, false );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onMouseWheel( event ) {\n            if ( this.enabled === false || this.enableZoom === false || ( this._state !== this._STATES.NONE ) ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            this._handleMouseWheel( event );\n\n            this.dispatchEvent( this._startEvent ); // not sure why these are here...\n            this.dispatchEvent( this._endEvent );\n\n        }\n\n        _onKeyDown( event ) {\n\n            if ( this.enabled === false || this.enableKeys === false || this.enablePan === false ) return;\n\n            this._handleKeyDown( event );\n\n        }\n\n        _onTouchStart( event ) {\n\n            if ( this.enabled === false ) return;\n\n            switch ( event.touches.length ) {\n                case 1: // three-fingered touch: pan\n\n                    if ( this.enablePan === false ) return;\n\n                    this._handleTouchStartPan( event );\n\n                    this._state = this._STATES.TOUCH_PAN;\n\n                    break;\n\n                case 2:\t// two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n\n                    this._handleTouchStartDolly( event );\n\n                    this._state = this._STATES.TOUCH_DOLLY;\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onTouchMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            switch ( event.touches.length ) {\n\n                case 1: // one-fingered touch: pan\n                    if ( this.enablePan === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_PAN ) return; // is this needed?...\n\n                    this._handleTouchMovePan( event );\n\n                    break;\n\n                case 2: // two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_DOLLY ) return; // is this needed?...\n\n                    this._handleTouchMoveDolly( event );\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n        }\n\n        _onTouchEnd( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleTouchEnd( event );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onContextMenu( event ) {\n            event.preventDefault();\n        }\n\n};\n\nexport default MapControls;\n"],"sourceRoot":""}