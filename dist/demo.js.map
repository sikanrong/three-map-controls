{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///delegated ./node_modules/three/build/three.module.js from dll-reference vendor","webpack:///./test/stub_dom.js","webpack:///external \"vendor\"","webpack:///./src/three-map-controls.js","webpack:///./src/demo.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","console","log","document","addEventListener","removeEventListener","body","clientWidth","clientHeight","vendor","__webpack_exports__","three__WEBPACK_IMPORTED_MODULE_0__","window","require","MapControls","EventDispatcher","constructor","camera","domElement","options","super","this","undefined","enabled","target","minDistance","maxDistance","enableZoom","zoomSpeed","zoomDampingAlpha","initialZoom","enablePan","keyPanSpeed","panDampingAlpha","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ZOOM","MOUSE","MIDDLE","PAN","assign","isTargetValid","mode","Error","normal","constant","center","radius","target0","clone","position0","position","zoom0","zoom","_changeEvent","type","_startEvent","_endEvent","_STATES","NONE","DOLLY","TOUCH_DOLLY","TOUCH_PAN","_init","distanceToPoint","_state","_mouse","Vector2","_finalTargetDistance","_currentTargetDistance","_panTarget","Vector3","_panCurrent","_minZoomPosition","_maxZoomPosition","_panStart","_panEnd","_panDelta","_dollyStart","_dollyEnd","_dollyDelta","_camOrientation","_zoomAlpha","_screenWorldXform","Math","tan","fov","PI","_straightDollyTrack","lerpVectors","abs","lookAt","_intersectCameraTarget","ray","direction","normalize","_updateZoomAlpha","_onContextMenu","bind","_onMouseDown","_onMouseWheel","_onTouchStart","_onTouchEnd","_onTouchMove","_onKeyDown","update","intersection","forEach","orientation","length","Ray","multiplyScalar","intersectPlane","subVectors","intersectSphere","_updateDollyTrack","getZoomAlpha","reset","copy","updateProjectionMatrix","dispatchEvent","panDelta","oldPanCurrent","lerp","add","v","quat","Quaternion","setFromAxisAngle","setFromMatrixColumn","matrix","x","applyQuaternion","y","dispose","_onMouseMove","_onMouseUp","zoomToFit","mesh","width","height","geometry","boundingSphere","localToWorld","vFOV","hFOV","atan","aspect","obj_aspect","targetAreaVisible","bbox","vOffset","hOffset","depth","distanceToPlane","Box2","cam_pos","cam_xpos","z","halfPi","angleTo","min","cos","_mm","max","diff","damping_alpha","round","intersect","addVectors","_calculateMinZoom","sub","_getZoomScale","pow","_panLeft","distance","cameraMatrix","set","_panUp","_pan","deltaX","deltaY","targetDistance","element","camToTarget","_dollyIn","dollyScale","_cameraOfKnownType","warn","_dollyOut","_handleUpdateDollyTrackMouse","event","prevMouse","offsetX","offsetY","equals","rc","Raycaster","setFromCamera","_handleMouseDownDolly","_handleMouseDownPan","_handleMouseMoveDolly","_handleMouseMovePan","_handleMouseUp","map_intersect","_handleMouseWheel","delta","wheelDelta","detail","_handleKeyDown","keyCode","_handleUpdateDollyTrackTouch","centerpoint","dx","touches","pageX","dy","pageY","mouse","_handleTouchStartDolly","sqrt","_handleTouchStartPan","_handleTouchMoveDolly","_handleTouchMovePan","_handleTouchEnd","preventDefault","button","stopPropagation","THREE","default","SPHERE_RADIUS","demo","container","scene","Scene","renderer","meshes","dims","selectedObject","controls","debugCamViewInterval","camViewMesh","camViewLines","init","setMode","animate","links","sphere","getElementById","plane","style","display","concat","_m","remove","initSphere","initPlane","PerspectiveCamera","innerWidth","innerHeight","Sphere","colors","SphereBufferGeometry","computeBoundingSphere","vertices","getAttribute","array","color","Color","vert","setRGB","push","g","b","addAttribute","Float32BufferAttribute","Float32Array","from","points","Points","PointsMaterial","size","vertexColors","VertexColors","polys","Mesh","MeshBasicMaterial","transparent","opacity","lines","wireframe","toggleDebugCamView","e","checked","clearInterval","setInterval","phidelta","PlaneBufferGeometry","side","DoubleSide","Plane","CubeGeometry","material","MeshNormalMaterial","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","appendChild","onWindowResize","_e","pick","zoomTo","clientX","clientY","raycaster","intersects","intersectObjects","children","requestAnimationFrame","rotation","render"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,IAIA3B,IAAA4B,EAAA,qBCnEAzB,EAAAD,QAAAF,EAAA,qBCAAG,EAAOD,SACH2B,SACIC,IAAK,cAETC,UACIC,iBAAkB,aAClBC,oBAAqB,aACrBC,MACIC,YAAa,KACbC,aAAc,KACdJ,iBAAkB,aAClBC,oBAAqB,+BCXjC9B,EAAAD,QAAAmC,qCCAArC,EAAAmB,EAAAmB,GAAA,IAAAC,EAAAvC,EAAA,GAOA,GAAoB,oBAAVwC,OAAsB,CACfC,EAAQ,GAu1BVC,wBAp1BWC,kBAElBC,YAAYC,EAAQC,EAAYC,GAC5BC,QAEAC,KAAKJ,OAASA,EAGdI,KAAKH,gBAA8BI,IAAfJ,EAA6BA,EAAaN,OAAOT,SAGrEkB,KAAKE,SAAU,EAGfF,KAAKG,OAGLH,KAAKI,YAAc,EACnBJ,KAAKK,YAAc,IAInBL,KAAKM,YAAa,EAClBN,KAAKO,UAAY,EACjBP,KAAKQ,iBAAmB,GACxBR,KAAKS,YAAc,EAGnBT,KAAKU,WAAY,EACjBV,KAAKW,YAAc,GACnBX,KAAKY,gBAAkB,GAGvBZ,KAAKa,YAAa,EAGlBb,KAAKc,MAASC,KAAM,GAAIC,GAAI,GAAIC,MAAO,GAAIC,OAAQ,IAGnDlB,KAAKmB,cAAiBC,KAAMC,QAAMC,OAAQC,IAAKF,QAAMN,MAGrDlD,OAAO2D,OAAOxB,KAAMF,GACpB,IAAI2B,GAAgB,EAEpB,QAAiBxB,IAAdD,KAAK0B,KACJ,MAAM,IAAIC,MAAM,2DAGpB,OAAO3B,KAAK0B,MACR,IAAK,QACDD,OAAwCxB,IAAvBD,KAAKG,OAAOyB,aAAiD3B,IAAzBD,KAAKG,OAAO0B,SACjE,MACJ,IAAK,SACDJ,OAAwCxB,IAAvBD,KAAKG,OAAO2B,aAA+C7B,IAAvBD,KAAKG,OAAO4B,OAIzE,IAAIN,EACA,MAAM,IAAIE,MAAM,2EAIpB3B,KAAKgC,QAAUhC,KAAKG,OAAO8B,QAC3BjC,KAAKkC,UAAYlC,KAAKJ,OAAOuC,SAASF,QACtCjC,KAAKoC,MAAQpC,KAAKJ,OAAOyC,KAEzBrC,KAAKsC,cAAiBC,KAAM,UAC5BvC,KAAKwC,aAAgBD,KAAM,SAC3BvC,KAAKyC,WAAcF,KAAM,OAEzBvC,KAAK0C,SAAYC,MAAS,EAAGC,MAAQ,EAAGrB,IAAM,EAAGsB,YAAc,EAAGC,UAAY,GAG9E9C,KAAK+C,QAGTA,QACI,GAAwD,GAArD/C,KAAKG,OAAO6C,gBAAgBhD,KAAKJ,OAAOuC,UACvC,MAAM,IAAIR,MAAM,kFAGpB3B,KAAKiD,OAASjD,KAAK0C,QAAQC,KAE3B3C,KAAKkD,OAAS,IAAIC,UAElBnD,KAAKoD,qBACLpD,KAAKqD,uBAELrD,KAAKsD,WAAa,IAAIC,UACtBvD,KAAKwD,YAAc,IAAID,UAEvBvD,KAAKyD,iBAAmB,IAAIF,UAC5BvD,KAAK0D,iBAAmB,IAAIH,UAE5BvD,KAAK2D,UAAY,IAAIR,UACrBnD,KAAK4D,QAAU,IAAIT,UACnBnD,KAAK6D,UAAY,IAAIV,UAErBnD,KAAK8D,YAAc,IAAIX,UACvBnD,KAAK+D,UAAY,IAAIZ,UACrBnD,KAAKgE,YAAc,IAAIb,UAEvBnD,KAAKiE,gBAAkB,IAAId,UAE3BnD,KAAKkE,WAELlE,KAAKmE,kBAAoBC,KAAKC,IAAOrE,KAAKJ,OAAO0E,IAAM,EAAMF,KAAKG,GAAK,KAGvEvE,KAAKwE,sBAELxE,KAAKJ,OAAOuC,SAASsC,YAAYzE,KAAKyD,iBAAkBzD,KAAK0D,iBAAkB1D,KAAKS,aACpFT,KAAKoD,qBAAuBpD,KAAKqD,uBAAyBe,KAAKM,IAAI1E,KAAKG,OAAO6C,gBAAgBhD,KAAKJ,OAAOuC,WAE3GnC,KAAKJ,OAAO+E,OAAO3E,KAAK0D,kBACxB1D,KAAKiE,gBAAkBjE,KAAK4E,yBAAyBC,IAAIC,UAAU7C,QAAQ8C,YAE3E/E,KAAKgF,mBAILhF,KAAKH,WAAWd,iBAAkB,cAAeiB,KAAKiF,eAAeC,KAAKlF,OAAO,GAEjFA,KAAKH,WAAWd,iBAAkB,YAAaiB,KAAKmF,aAAaD,KAAKlF,OAAO,GAC7EA,KAAKH,WAAWd,iBAAkB,aAAciB,KAAKoF,cAAcF,KAAKlF,OAAO,GAC/EA,KAAKH,WAAWd,iBAAkB,sBAAuBiB,KAAKoF,cAAcF,KAAKlF,OAAO,GAExFA,KAAKH,WAAWd,iBAAkB,aAAciB,KAAKqF,cAAcH,KAAKlF,OAAO,GAC/EA,KAAKH,WAAWd,iBAAkB,WAAYiB,KAAKsF,YAAYJ,KAAKlF,OAAO,GAC3EA,KAAKH,WAAWd,iBAAkB,YAAaiB,KAAKuF,aAAaL,KAAKlF,OAAO,GAE7EA,KAAKH,WAAWd,iBAAkB,UAAWiB,KAAKwF,WAAWN,KAAKlF,OAAO,GAGzEA,KAAKyF,SAGTb,yBACI,IACIC,EADAa,EAAe,IAAInC,UAGvB,OAAOvD,KAAK0B,MACR,IAAK,UACC,EAAG,GAAGiE,QAASC,IACVF,GAAgBA,EAAaG,SAAW,IAG3ChB,EAAM,IAAIiB,MAAI9F,KAAKJ,OAAOuC,SAAUnC,KAAKG,OAAOyB,OAAOK,QAAQ8D,eAAeH,GAAab,cACvFiB,eAAehG,KAAKG,OAAQuF,KAEpC,MACJ,IAAK,UACDb,EAAM,IAAIiB,MAAI9F,KAAKJ,OAAOuC,UAAW,IAAIoB,WAAW0C,WAAWjG,KAAKG,OAAO2B,OAAQ9B,KAAKJ,OAAOuC,UAAU4C,cACrGmB,gBAAgBlG,KAAKG,OAAQuF,GAIzC,OACIA,aAAcA,EACdb,IAAKA,GAIbL,sBACIxE,KAAKmG,kBAAkBnG,KAAK4E,yBAAyBC,KAGzDuB,eACI,OAAOpG,KAAKkE,WAGhBmC,QAEIrG,KAAKG,OAAOmG,KAAMtG,KAAKgC,SACvBhC,KAAKJ,OAAOuC,SAASmE,KAAMtG,KAAKkC,WAChClC,KAAKJ,OAAOyC,KAAOrC,KAAKoC,MAExBpC,KAAKJ,OAAO2G,yBAEZvG,KAAK+C,QAEL/C,KAAKwG,cAAexG,KAAKsC,cAEzBtC,KAAKyF,SAELzF,KAAKiD,OAASjD,KAAK0C,QAAQC,KAK/B8C,SACI,IAAIgB,EAAW,IAAIlD,UACfmD,EAAgB,IAAInD,UACpBpB,EAAWnC,KAAKJ,OAAOuC,SAO3B,OAJAuE,EAAcJ,KAAKtG,KAAKwD,aACxBxD,KAAKwD,YAAYmD,KAAM3G,KAAKsD,WAAYtD,KAAKY,iBAC7C6F,EAASR,WAAWjG,KAAKwD,YAAakD,GAE9B1G,KAAK0B,MACT,IAAK,QACD1B,KAAK0D,iBAAiBkD,IAAIH,GAC1BzG,KAAKyD,iBAAiBmD,IAAIH,GAC1B,MACJ,IAAK,SACD,MAAMI,EAAI,IAAItD,UACRuD,EAAO,IAAIC,aAEjBD,EAAKE,iBAAiBH,EAAEI,oBAAqBjH,KAAKJ,OAAOsH,OAAQ,GAAKT,EAASU,GAE/EnH,KAAK0D,iBAAiB0D,gBAAgBN,GACtC9G,KAAKyD,iBAAiB2D,gBAAgBN,GAEtCA,EAAKE,iBAAiBH,EAAEI,oBAAqBjH,KAAKJ,OAAOsH,OAAQ,GAAKT,EAASY,GAE/ErH,KAAK0D,iBAAiB0D,gBAAgBN,GACtC9G,KAAKyD,iBAAiB2D,gBAAgBN,GAK9C3E,EAASsC,YAAYzE,KAAKyD,iBAAkBzD,KAAK0D,iBAAkB1D,KAAKgF,oBAExD,UAAbhF,KAAK0B,MACJ1B,KAAKJ,OAAO+E,OAAO3E,KAAKG,OAAO2B,QAIvCwF,UACItH,KAAKH,WAAWb,oBAAqB,cAAegB,KAAKiF,gBAAgB,GACzEjF,KAAKH,WAAWb,oBAAqB,YAAagB,KAAKmF,cAAc,GACrEnF,KAAKH,WAAWb,oBAAqB,aAAcgB,KAAKoF,eAAe,GACvEpF,KAAKH,WAAWb,oBAAqB,sBAAuBgB,KAAKoF,eAAe,GAEhFpF,KAAKH,WAAWb,oBAAqB,aAAcgB,KAAKqF,eAAe,GACvErF,KAAKH,WAAWb,oBAAqB,WAAYgB,KAAKsF,aAAa,GACnEtF,KAAKH,WAAWb,oBAAqB,YAAagB,KAAKuF,cAAc,GAErEhG,OAAOT,SAASE,oBAAqB,YAAagB,KAAKuH,cAAc,GACrEhI,OAAOT,SAASE,oBAAqB,UAAWgB,KAAKwH,YAAY,GAEjExH,KAAKH,WAAWb,oBAAqB,UAAWgB,KAAKwF,YAAY,GAGrEiC,UAAWC,EAAM5F,EAAQ6F,EAAOC,GAE5B9F,EAASA,GAAU4F,EAAKG,SAASC,eAAehG,OAChD6F,EAAQA,GAAgD,EAAtCD,EAAKG,SAASC,eAAe/F,YAEjC9B,IAAX2H,IACCA,EAASD,GAEb3H,KAAKsD,WAAWgD,KAAKoB,EAAKK,aAAajG,EAAOG,UAC9CjC,KAAKwD,YAAY8C,KAAKtG,KAAK4E,yBAAyBc,cAEpD1F,KAAKwE,sBAEL,IAAIwD,EAAOhI,KAAKJ,OAAO0E,KAAOF,KAAKG,GAAK,KACpC0D,EAAO,EAAI7D,KAAK8D,KAAM9D,KAAKC,IAAK2D,EAAO,GAAMhI,KAAKJ,OAAOuI,QACzDC,EAAaT,EAAQC,EAEzB5H,KAAKoD,sBAA2BgF,EAAapI,KAAKJ,OAAOuI,OAASR,EAAQC,GAAU,EAAKxD,KAAKC,KAAM+D,EAAapI,KAAKJ,OAAOuI,OAASF,EAAOD,GAAQ,GAMzJK,oBAEI,IAAIC,EAAMC,EAASC,EAAS1G,EAE5B,OAAO9B,KAAK0B,MACR,IAAK,QACD,IACI+G,EADM,IAAI3C,MAAI9F,KAAKJ,OAAOuC,SAAUnC,KAAKiE,iBAC7ByE,gBAAgB1I,KAAKG,QAErC2B,EAAS9B,KAAKJ,OAAOuC,SAASF,QAG9BuG,GADAD,EAAUvI,KAAKmE,kBAAoBsE,GACfzI,KAAKJ,OAAOuI,OAEhCG,EAAO,IAAIK,OACP,IAAIxF,UAAQrB,EAAOqF,EAAIqB,EAAS1G,EAAOuF,EAAIkB,GAC3C,IAAIpF,UAAQrB,EAAOqF,EAAIqB,EAAS1G,EAAOuF,EAAIkB,IAG/C,MACJ,IAAK,SAED,MAAMK,GAAY,IAAIrF,WAAW0C,WAAWjG,KAAKG,OAAO2B,OAAQ9B,KAAKJ,OAAOuC,UACtE0G,EAAW,IAAItF,UAAQqF,EAAQzB,EAAG,EAAGyB,EAAQE,GAE7CC,EAAS3E,KAAKG,GAAK,GAEzBzC,EAAS,IAAIqB,UACT0F,EAASG,QAAQ,IAAIzF,UAAQ,EAAE,EAAE,IACjCqF,EAAQI,QAAQ,IAAIzF,UAAQ,EAAE,EAAE,MAG7B4D,EAAKnH,KAAKJ,OAAOuC,SAAS2G,EAAI,EAAK,EAAE1E,KAAKG,GAAKzC,EAAOqF,EAAKrF,EAAOqF,EAEzE,MAAM1J,EAAImL,EAAQ/C,SAIlB0C,EAAUvI,KAAKmE,mBAAsB1G,EAAIuC,KAAKG,OAAO4B,OAAU,GAC/DwG,EAAUnE,KAAK6E,IAAIV,EAASQ,GAG5B,MAAM7K,EAAI8B,KAAKG,OAAO4B,OAASqC,KAAK8E,IAAIpH,EAAOuF,EAAI0B,GACnDP,EAAUD,EAAUvI,KAAKJ,OAAOuI,QAAWnI,KAAKG,OAAO4B,OAAS7D,GAChEsK,EAAUpE,KAAK6E,IAAIT,EAASO,GAE5BT,EAAO,IAAIK,OACP,IAAIxF,UAAQrB,EAAOqF,EAAIqB,EAAUO,EAAQjH,EAAOuF,EAAIkB,EAAUQ,GAC9D,IAAI5F,UAAQrB,EAAOqF,EAAIqB,EAAUO,EAAQjH,EAAOuF,EAAIkB,EAAUQ,KAGjE,MAAO,OAAOpD,QAAQwD,IACnBb,EAAKa,GAAKhC,EAAKmB,EAAKa,GAAKhC,EAAI/C,KAAKG,IAAO,EAAEH,KAAKG,GAAK+D,EAAKa,GAAKhC,EAAImB,EAAKa,GAAKhC,IAMzF,OAAOmB,EAGXtD,mBACIhF,KAAKoD,qBAAuBgB,KAAKgF,IAAKpJ,KAAKI,YAAagE,KAAK6E,IAAKjJ,KAAKK,YAAaL,KAAKoD,uBACzF,IAAIiG,EAAOrJ,KAAKqD,uBAAyBrD,KAAKoD,qBAC1CkG,EAAgBtJ,KAAKQ,iBAKzB,OAJAR,KAAKqD,wBAA0BgG,EAAOC,EAEtCtJ,KAAKkE,WAAaE,KAAKM,IAAIN,KAAKmF,MADV,KACiB,GAAMvJ,KAAKqD,uBAAyBrD,KAAKI,cAAgBJ,KAAKK,YAAcL,KAAKI,eADlG,KAGfJ,KAAKkE,WAGhBiC,kBAAkBtB,GACd,IAAI2E,EAAY,IAAIjG,UAEpB,OAAOvD,KAAK0B,MACR,IAAK,QACDmD,EAAImB,eAAehG,KAAKG,OAAQqJ,GAChC,MACJ,IAAK,SACD3E,EAAIqB,gBAAgBlG,KAAKG,OAAQqJ,GAItCA,IACCxJ,KAAK0D,iBAAiB+F,WAAWD,GAAW,IAAIjG,WAAU0C,WAAWjG,KAAKJ,OAAOuC,SAAUqH,GAAWzE,YAAYgB,eAAe/F,KAAKI,cACtIJ,KAAKyD,iBAAiB6C,KAAKtG,KAAK0J,kBAAkB1J,KAAKJ,OAAOuC,SAAUqH,IAExExJ,KAAKoD,qBAAuBpD,KAAKqD,uBAAyBmG,EAAUvH,QAAQ0H,IAAI3J,KAAKJ,OAAOuC,UAAU0D,UAI9G+D,gBACI,OAAOxF,KAAKyF,IAAK,IAAM7J,KAAKO,WAIhCuJ,SAAUC,EAAUC,GAChB,IAAInD,EAAI,IAAItD,UAEZ,OAAOvD,KAAK0B,MACR,IAAK,SACDmF,EAAEoD,KAAMF,EAAU,EAAG,GACrB,MACJ,IAAK,QACDlD,EAAEI,oBAAqB+C,EAAc,GACrCnD,EAAEd,gBAAkBgE,GAI5B/J,KAAKsD,WAAWsD,IAAKC,GAGzBqD,OAASH,EAAUC,GACf,IAAInD,EAAI,IAAItD,UAEZ,OAAOvD,KAAK0B,MACR,IAAK,SACDmF,EAAEoD,IAAI,GAAKF,EAAU,GACrB,MACJ,IAAK,QACDlD,EAAEI,oBAAqB+C,EAAc,GACrCnD,EAAEd,eAAgBgE,GAI1B/J,KAAKsD,WAAWsD,IAAKC,GAIzBsD,KAAMC,EAAQC,GACV,IAGIC,EAHAC,EAAUvK,KAAKH,aAAeN,OAAOT,SAAWkB,KAAKH,WAAWZ,KAAOe,KAAKH,WAE5E3B,EAAI,IAAI4H,MAAI9F,KAAKJ,OAAOuC,SAAUnC,KAAKiE,iBAG3C,OAAOjE,KAAK0B,MACR,IAAK,QACD4I,EAAiBtK,KAAKmE,kBAAoBjG,EAAEwK,gBAAgB1I,KAAKG,QACjE,MACJ,IAAK,SAED,MAAMqK,GAAe,IAAIjH,WAAW0C,WAAWjG,KAAKJ,OAAOuC,SAAUnC,KAAKG,OAAO2B,QACjFwI,EAAiBtK,KAAKmE,mBAAsBqG,EAAY3E,SAAW7F,KAAKG,OAAO4B,OAAU,GAKjG/B,KAAK8J,SAAU,EAAIM,EAASE,EAAiBC,EAAQpL,aAAca,KAAKJ,OAAOsH,QAC/ElH,KAAKkK,OAAQ,EAAIG,EAASC,EAAiBC,EAAQpL,aAAca,KAAKJ,OAAOsH,QAIjFuD,SAAUC,GACD1K,KAAK2K,qBACN3K,KAAKoD,sBAAwBsH,GAE7B9L,QAAQgM,KAAM,qFACd5K,KAAKM,YAAa,GAI1BuK,UAAWH,GACF1K,KAAK2K,qBACN3K,KAAKoD,sBAAwBsH,GAE7B9L,QAAQgM,KAAM,qFACd5K,KAAKM,YAAa,GAI1BqK,qBACI,MAA4B,sBAArB3K,KAAKJ,OAAO2C,KAGvBuI,6BAA6BC,GACzB,IAAIC,EAAYhL,KAAKkD,OAAOjB,QAG5B,GAFAjC,KAAKkD,OAAO+G,IAAMc,EAAME,QAAUjL,KAAKH,WAAWX,YAAgB,EAAI,GAAO6L,EAAMG,QAAUlL,KAAKH,WAAWV,aAAiB,EAAI,IAE9H6L,EAAUG,OAAOnL,KAAKkD,QAAQ,CAC9B,IAAIkI,EAAK,IAAIC,YACbD,EAAGE,cAActL,KAAKkD,OAAQlD,KAAKJ,QACnCI,KAAKmG,kBAAkBiF,EAAGvG,MAIlC0G,sBAAuBR,GACnB/K,KAAK8K,6BAA6BC,GAClC/K,KAAK8D,YAAYmG,IAAKc,EAAME,QAASF,EAAMG,SAG/CM,oBAAqBT,GAEjB/K,KAAK2D,UAAUsG,IAAKc,EAAME,QAASF,EAAMG,SAI7CO,sBAAuBV,GAEnB/K,KAAK8K,6BAA6BC,GAIlC/K,KAAK+D,UAAUkG,IAAKc,EAAME,QAASF,EAAMG,SAEzClL,KAAKgE,YAAYiC,WAAWjG,KAAK+D,UAAW/D,KAAK8D,aAE5C9D,KAAKgE,YAAYqD,EAAI,EAEtBrH,KAAKyK,SAAUzK,KAAK4J,iBAEZ5J,KAAKgE,YAAYqD,EAAI,GAE7BrH,KAAK6K,UAAW7K,KAAK4J,iBAIzB5J,KAAK8D,YAAYwC,KAAMtG,KAAK+D,WAE5B/D,KAAKyF,SAITiG,oBAAqBX,GAIjB/K,KAAK4D,QAAQqG,IAAKc,EAAME,QAASF,EAAMG,SAEvClL,KAAK6D,UAAUoC,WAAYjG,KAAK4D,QAAS5D,KAAK2D,WAE9C3D,KAAKmK,KAAMnK,KAAK6D,UAAUsD,EAAGnH,KAAK6D,UAAUwD,GAE5CrH,KAAK2D,UAAU2C,KAAMtG,KAAK4D,SAE1B5D,KAAKyF,SAITkG,eAAgBZ,IAMhBrB,kBAAkBd,EAASgD,GACvB,OAAOA,EAAc3J,QAAQ2E,IACzBgC,EAAQ3G,QACP0H,IAAIiC,GACJ7G,YACAgB,eAAe/F,KAAKK,cAK7BwL,kBAAmBd,GACf/K,KAAK8K,6BAA6BC,GAElC,IAAIe,EAAQ,OAEc7L,IAArB8K,EAAMgB,WAIPD,EAAQf,EAAMgB,gBAEW9L,IAAjB8K,EAAMiB,SAIdF,GAAUf,EAAMiB,QAIfF,EAAQ,EACT9L,KAAK6K,UAAW7K,KAAK4J,iBACbkC,EAAQ,GAChB9L,KAAKyK,SAAUzK,KAAK4J,iBAGxB5J,KAAKyF,SAGTwG,eAAgBlB,GAIZ,OAASA,EAAMmB,SAEX,KAAKlM,KAAKc,KAAKE,GACXhB,KAAKmK,KAAM,EAAGnK,KAAKW,aACnBX,KAAKyF,SACL,MAEJ,KAAKzF,KAAKc,KAAKI,OACXlB,KAAKmK,KAAM,GAAKnK,KAAKW,aACrBX,KAAKyF,SACL,MAEJ,KAAKzF,KAAKc,KAAKC,KACXf,KAAKmK,KAAMnK,KAAKW,YAAa,GAC7BX,KAAKyF,SACL,MAEJ,KAAKzF,KAAKc,KAAKG,MACXjB,KAAKmK,MAAQnK,KAAKW,YAAa,GAC/BX,KAAKyF,UAMjB0G,6BAA8BpB,GAC1B,IAAIqB,EAAc,IAAIjJ,UAElBkJ,EAAKtB,EAAMuB,QAAS,GAAIC,MAAQxB,EAAMuB,QAAS,GAAIC,MACnDC,EAAKzB,EAAMuB,QAAS,GAAIG,MAAQ1B,EAAMuB,QAAS,GAAIG,MAEvDL,EAAYjF,EAAI4D,EAAMuB,QAAS,GAAIC,MAASF,EAAK,EACjDD,EAAY/E,EAAI0D,EAAMuB,QAAS,GAAIG,MAASD,EAAK,EAEjD,IAAIE,EAAQ,IAAIvJ,UAChBuJ,EAAMvF,EAAMiF,EAAYjF,EAAItH,WAAWX,YAAgB,EAAI,EAC3DwN,EAAMrF,GAAQ+E,EAAY/E,EAAIxH,WAAWV,aAAiB,EAAI,EAE9Da,KAAKmG,kBAAkBuG,GAG3BC,uBAAwB5B,GACpB/K,KAAKmM,6BAA6BpB,GAElC,IAAIsB,EAAKtB,EAAMuB,QAAS,GAAIC,MAAQxB,EAAMuB,QAAS,GAAIC,MACnDC,EAAKzB,EAAMuB,QAAS,GAAIG,MAAQ1B,EAAMuB,QAAS,GAAIG,MAEnD1C,EAAW3F,KAAKwI,KAAMP,EAAKA,EAAKG,EAAKA,GAEzCxM,KAAK8D,YAAYmG,IAAK,EAAGF,GAI7B8C,qBAAsB9B,GAIlB/K,KAAK2D,UAAUsG,IAAKc,EAAMuB,QAAS,GAAIC,MAAOxB,EAAMuB,QAAS,GAAIG,OAKrEK,sBAAuB/B,GACnB/K,KAAKmM,6BAA6BpB,GAIlC,IAAIsB,EAAKtB,EAAMuB,QAAS,GAAIC,MAAQxB,EAAMuB,QAAS,GAAIC,MACnDC,EAAKzB,EAAMuB,QAAS,GAAIG,MAAQ1B,EAAMuB,QAAS,GAAIG,MAEnD1C,EAAW3F,KAAKwI,KAAMP,EAAKA,EAAKG,EAAKA,GAEzCxM,KAAK+D,UAAUkG,IAAK,EAAGF,GAEvB/J,KAAKgE,YAAYiC,WAAYjG,KAAK+D,UAAW/D,KAAK8D,aAE7C9D,KAAKgE,YAAYqD,EAAI,EAEtBrH,KAAK6K,UAAW7K,KAAK4J,iBAEb5J,KAAKgE,YAAYqD,EAAI,GAE7BrH,KAAKyK,SAAUzK,KAAK4J,iBAIxB5J,KAAK8D,YAAYwC,KAAMtG,KAAK+D,WAE5B/D,KAAKyF,SAITsH,oBAAqBhC,GAEjB/K,KAAK4D,QAAQqG,IAAKc,EAAMuB,QAAS,GAAIC,MAAOxB,EAAMuB,QAAS,GAAIG,OAE/DzM,KAAK6D,UAAUoC,WAAYjG,KAAK4D,QAAS5D,KAAK2D,WAE9C3D,KAAKmK,KAAMnK,KAAK6D,UAAUsD,EAAGnH,KAAK6D,UAAUwD,GAE5CrH,KAAK2D,UAAU2C,KAAMtG,KAAK4D,SAE1B5D,KAAKyF,SAITuH,gBAAiBjC,IAQjB5F,aAAc4F,GAEV,IAAsB,IAAjB/K,KAAKE,QAAV,CAIA,GAFA6K,EAAMkC,iBAEDlC,EAAMmC,SAAWlN,KAAKmB,aAAaC,KAAO,CAE3C,IAAyB,IAApBpB,KAAKM,WAAuB,OAEjCN,KAAKuL,sBAAuBR,GAE5B/K,KAAKiD,OAASjD,KAAK0C,QAAQE,WAExB,GAAKmI,EAAMmC,SAAWlN,KAAKmB,aAAaI,IAAM,CAEjD,IAAwB,IAAnBvB,KAAKU,UAAsB,OAEhCV,KAAKwL,oBAAqBT,GAE1B/K,KAAKiD,OAASjD,KAAK0C,QAAQnB,IAI1BvB,KAAKiD,SAAWjD,KAAK0C,QAAQC,OAE9BpD,OAAOT,SAASC,iBAAkB,YAAaiB,KAAKuH,aAAarC,KAAKlF,OAAO,GAC7ET,OAAOT,SAASC,iBAAkB,UAAWiB,KAAKwH,WAAWtC,KAAKlF,OAAO,GAEzEA,KAAKwG,cAAexG,KAAKwC,eAMjC+E,aAAcwD,GAEV,IAAsB,IAAjB/K,KAAKE,QAIV,GAFA6K,EAAMkC,iBAEDjN,KAAKiD,SAAWjD,KAAK0C,QAAQE,MAAQ,CAEtC,IAAyB,IAApB5C,KAAKM,WAAuB,OAEjCN,KAAKyL,sBAAuBV,QAEzB,GAAK/K,KAAKiD,SAAWjD,KAAK0C,QAAQnB,IAAM,CAE3C,IAAwB,IAAnBvB,KAAKU,UAAsB,OAEhCV,KAAK0L,oBAAqBX,IAIlCvD,WAAYuD,IAEc,IAAjB/K,KAAKE,UAEVF,KAAK2L,eAAgBZ,GAErBxL,OAAOT,SAASE,oBAAqB,YAAagB,KAAKuH,cAAc,GACrEhI,OAAOT,SAASE,oBAAqB,UAAWgB,KAAKwH,YAAY,GAEjExH,KAAKwG,cAAexG,KAAKyC,WAEzBzC,KAAKiD,OAASjD,KAAK0C,QAAQC,MAI/ByC,cAAe2F,IACW,IAAjB/K,KAAKE,UAAyC,IAApBF,KAAKM,YAA0BN,KAAKiD,SAAWjD,KAAK0C,QAAQC,OAE3FoI,EAAMkC,iBACNlC,EAAMoC,kBAENnN,KAAK6L,kBAAmBd,GAExB/K,KAAKwG,cAAexG,KAAKwC,aACzBxC,KAAKwG,cAAexG,KAAKyC,YAI7B+C,WAAYuF,IAEc,IAAjB/K,KAAKE,UAAyC,IAApBF,KAAKa,aAA2C,IAAnBb,KAAKU,WAEjEV,KAAKiM,eAAgBlB,GAIzB1F,cAAe0F,GAEX,IAAsB,IAAjB/K,KAAKE,QAAV,CAEA,OAAS6K,EAAMuB,QAAQzG,QACnB,KAAK,EAED,IAAwB,IAAnB7F,KAAKU,UAAsB,OAEhCV,KAAK6M,qBAAsB9B,GAE3B/K,KAAKiD,OAASjD,KAAK0C,QAAQI,UAE3B,MAEJ,KAAK,EAED,IAAyB,IAApB9C,KAAKM,WAAuB,OAEjCN,KAAK2M,uBAAwB5B,GAE7B/K,KAAKiD,OAASjD,KAAK0C,QAAQG,YAE3B,MAEJ,QAEI7C,KAAKiD,OAASjD,KAAK0C,QAAQC,KAI9B3C,KAAKiD,SAAWjD,KAAK0C,QAAQC,MAE9B3C,KAAKwG,cAAexG,KAAKwC,cAMjC+C,aAAcwF,GAEV,IAAsB,IAAjB/K,KAAKE,QAKV,OAHA6K,EAAMkC,iBACNlC,EAAMoC,kBAEGpC,EAAMuB,QAAQzG,QAEnB,KAAK,EACD,IAAwB,IAAnB7F,KAAKU,UAAsB,OAChC,GAAKV,KAAKiD,SAAWjD,KAAK0C,QAAQI,UAAY,OAE9C9C,KAAK+M,oBAAqBhC,GAE1B,MAEJ,KAAK,EAED,IAAyB,IAApB/K,KAAKM,WAAuB,OACjC,GAAKN,KAAKiD,SAAWjD,KAAK0C,QAAQG,YAAc,OAEhD7C,KAAK8M,sBAAuB/B,GAE5B,MAEJ,QAEI/K,KAAKiD,OAASjD,KAAK0C,QAAQC,MAMvC2C,YAAayF,IAEa,IAAjB/K,KAAKE,UAEVF,KAAKgN,gBAAiBjC,GAEtB/K,KAAKwG,cAAexG,KAAKyC,WAEzBzC,KAAKiD,OAASjD,KAAK0C,QAAQC,MAI/BsC,eAAgB8F,GACZA,EAAMkC,oCC11BlB,IAAIG,EAAQ5N,EAAQ,GAChBC,EAAcD,EAAQ,GAA2B6N,SAAWD,EAAM3N,YAEtE,MAAM6N,EAAgB,GA4StB/N,OAAOR,iBAAiB,OAAQ,KAC5BQ,OAAOgO,KAAO,UA1Sd5N,YAAa+B,GACT1B,KAAKwN,UAAY1O,SAASG,KAC1Be,KAAKyN,MAAQ,IAAIL,EAAMM,MACvB1N,KAAK2N,SAAW,KAChB3N,KAAK4N,UACL5N,KAAK6N,KAAO,GACZ7N,KAAK8N,eAAiB,KACtB9N,KAAK+N,SACL/N,KAAK0B,KAEL1B,KAAKgO,qBAELhO,KAAKiO,YACLjO,KAAKkO,aAELlO,KAAKmO,OACLnO,KAAKoO,QAAQ1M,GACb1B,KAAKqO,UAGTD,QAAQ1M,GACJ1B,KAAK0B,KAAOA,EACZ,MAAM4M,GACFC,OAAQzP,SAAS0P,eAAe,eAChCC,MAAO3P,SAAS0P,eAAe,eAiBnC,OAdAF,EAAMtO,KAAK0B,MAAMgN,MAAMC,QAAU,OACjCL,EAAoB,SAAbtO,KAAK0B,KAAkB,SAAW,SAASgN,MAAMC,QAAU,eAElE3O,KAAK4N,OAAOgB,QAAQ5O,KAAKkO,aAAclO,KAAKiO,cAActI,QAASkJ,SACrD5O,IAAP4O,IAIH7O,KAAKyN,MAAMqB,OAAOD,GAClBA,EAAGhH,SAASP,aAGhBtH,KAAKkO,aAAelO,KAAKiO,iBAAchO,EAEhCD,KAAK0B,MACR,IAAK,SACD1B,KAAK+O,aACL,MACJ,IAAK,QACD/O,KAAKgP,aAKjBD,aAEI,IAAInP,EAAS,IAAIwN,EAAM6B,kBAAmB,GAAI1P,OAAO2P,WAAa3P,OAAO4P,YAAa,EAAG,KACzFvP,EAAOuC,SAAS2G,EAAI,GACpB9I,KAAK+N,SAAW,IAAItO,EAAaG,EAAQI,KAAK2N,SAAS9N,YACnDM,OAAQ,IAAIiN,EAAMgC,OAAO,IAAIhC,EAAM7J,QAAQ,EAAE,EAAE,GAAI+J,GACnD5L,KAAM,SACNtB,YAAa,EACbC,YAAaT,EAAOuC,SAAS2G,IAGjC,MAAMuG,KAEAxH,EAAW,IAAIuF,EAAMkC,qBAAqBhC,EAAetN,KAAK6N,KAAM7N,KAAK6N,MAC/EhG,EAAS0H,wBAET,MAAMC,EAAW3H,EAAS4H,aAAa,YAAYC,MACnD,IAAI,IAAIvS,EAAI,EAAGA,EAAIqS,EAAS3J,OAAQ1I,GAAK,EAAE,CACvC,IAAIwS,EAAQ,IAAIvC,EAAMwC,MAClBC,EAAO,IAAIzC,EAAM7J,QAAQiM,EAASrS,GAAIqS,EAASrS,EAAE,GAAIqS,EAASrS,EAAE,IAEpEwS,EAAMG,OACAD,EAAK1I,EAAImG,EAAkB,GAC3BuC,EAAKxI,EAAIiG,EAAkB,GAC3BuC,EAAK/G,EAAIwE,EAAkB,IAGjC+B,EAAOU,KAAMJ,EAAMzR,EAAGyR,EAAMK,EAAGL,EAAMM,GAGzCpI,EAASqI,aAAc,QAAS,IAAI9C,EAAM+C,uBAAwBC,aAAaC,KAAKhB,GAAS,IAE7F,MAAMiB,EAAS,IAAIlD,EAAMmD,OACrB1I,EACA,IAAIuF,EAAMoD,gBAAkBC,KAAM,EAAGC,aAActD,EAAMuD,gBAG7D3Q,KAAKyN,MAAM7G,IAAK0J,GAChBtQ,KAAK4N,OAAOmC,KAAMO,GAElB,MAAMM,EAAQ,IAAIxD,EAAMyD,KACpBhJ,EACA,IAAIuF,EAAM0D,mBACNJ,aAActD,EAAMuD,aACpBI,aAAa,EACbC,QAAS,MAKjBhR,KAAK4N,OAAOmC,KAAMa,GAClB5Q,KAAKyN,MAAM7G,IAAKgK,GAEhB,MAAMK,EAAQ,IAAI7D,EAAMyD,KACpBhJ,EACA,IAAIuF,EAAM0D,mBACNJ,aAActD,EAAMuD,aACpBO,WAAW,KAInBlR,KAAK4N,OAAOmC,KAAMkB,GAClBjR,KAAKyN,MAAM7G,IAAKqK,GAIpBE,mBAAmBC,GACf,IAAIA,EAAEjR,OAAOkR,QAOT,OANAC,cAActR,KAAKgO,sBACnBhO,KAAKyN,MAAMqB,OAAQ9O,KAAKiO,aACxBjO,KAAKyN,MAAMqB,OAAQ9O,KAAKkO,cACxBlO,KAAKiO,YAAYpG,SAASP,UAC1BtH,KAAKkO,aAAarG,SAASP,UAC3BtH,KAAKkO,aAAelO,KAAKiO,iBAAchO,GAChC,EAGXD,KAAKgO,qBAAuBuD,YAAY,KACpC,MAAMjJ,EAAOtI,KAAK+N,SAAS1F,oBAG3B,IAAIR,EAAU1F,EAGd,OALAvD,QAAQC,OAAOyJ,EAAKW,IAAI9B,MAAMmB,EAAKW,IAAI5B,MAAMiB,EAAKc,IAAIjC,MAAMmB,EAAKc,IAAI/B,KAGrElF,EAAW,IAAIiL,EAAM7J,QAAQ,EAAE,EAAE,GAEzBvD,KAAK0B,MACT,IAAK,SACD,IAAI8P,EAAWpN,KAAKM,IAAI4D,EAAKc,IAAIjC,EAAImB,EAAKW,IAAI9B,GAC3CqK,EAAWpN,KAAKG,KACfiN,EAAWpN,KAAKM,IAAK4D,EAAKc,IAAIjC,EAAY,EAAR/C,KAAKG,GAAQ+D,EAAKW,IAAI9B,IAE5DU,EAAW,IAAIuF,EAAMkC,qBAAqBhC,EAAetN,KAAK6N,KAAM7N,KAAK6N,KACrEvF,EAAKW,IAAI9B,EAAI/C,KAAKG,GAAG,EACrBiN,GACClJ,EAAKc,IAAI/B,EAAIjD,KAAKG,GAAG,EACtBH,KAAKM,IAAI4D,EAAKc,IAAI/B,EAAIiB,EAAKW,IAAI5B,IAEnC,MACJ,IAAK,QAEDQ,EAAW,IAAIuF,EAAMqE,oBAChBnJ,EAAKc,IAAIjC,EAAImB,EAAKW,IAAI9B,EACtBmB,EAAKc,IAAI/B,EAAIiB,EAAKW,IAAI5B,EACvBrH,KAAK6N,KAAM7N,KAAK6N,MAGpB1L,EAASmE,KAAKtG,KAAK+N,SAASnO,OAAOuC,UACnCA,EAAS2G,EAAI,OAKE7I,GAApBD,KAAKiO,aACJjO,KAAKiO,YAAc,IAAIb,EAAMyD,KACzBhJ,EACA,IAAIuF,EAAM0D,mBACNnB,MAAO,IAAIvC,EAAMwC,MAAM,IAAK,EAAG,GAC/B8B,KAAMtE,EAAMuE,WACZZ,aAAa,EACbC,QAAS,MAIjBhR,KAAKkO,aAAe,IAAId,EAAMyD,KAC1BhJ,EACA,IAAIuF,EAAM0D,mBACNnB,MAAO,IAAIvC,EAAMwC,MAAM,IAAK,EAAG,GAC/BsB,WAAW,KAInBlR,KAAKyN,MAAM7G,IAAK5G,KAAKiO,aACrBjO,KAAKyN,MAAM7G,IAAK5G,KAAKkO,gBAGrBlO,KAAKiO,YAAYpG,SAASvB,KAAKuB,GAC/B7H,KAAKkO,aAAarG,SAASvB,KAAKuB,GAEhCA,EAASP,WAGbtH,KAAKiO,YAAYpG,SAAS0H,wBAC1BvP,KAAKiO,YAAY9L,SAASmE,KAAKnE,GAC/BnC,KAAKkO,aAAa/L,SAASmE,KAAKnE,IAEjC,KAGP6M,YAEI,IAAIpP,EAAS,IAAIwN,EAAM6B,kBAAmB,GAAI1P,OAAO2P,WAAa3P,OAAO4P,YAAa,EAAG,KACzFvP,EAAOuC,SAAS2G,EAAI,GACpB9I,KAAK+N,SAAW,IAAItO,EAAaG,EAAQI,KAAK2N,SAAS9N,YACnDM,OAAQ,IAAIiN,EAAMwE,MAAM,IAAIxE,EAAM7J,QAAQ,EAAE,EAAE,GAAI,GAClD7B,KAAM,QACNtB,YAAa,EACbC,YAAa,KAKjB,IAFA,IAEQ8G,EAAI,EAAGA,EAAInH,KAAK6N,KAAM1G,IAC1B,IAAI,IAAIE,EAAI,EAAGA,EAAIrH,KAAK6N,KAAMxG,IAAI,CAC9B,IAAIQ,EAAW,IAAIuF,EAAMyE,aAAa,EAAG,EAAG,GACxCC,EAAW,IAAI1E,EAAM2E,mBAErBrK,EAAO,IAAI0F,EAAMyD,KAAMhJ,EAAUiK,GACrCpK,EAAKvF,SAASgF,IAAQ,GAAMnH,KAAK6N,KAR5B,IAQ8C1G,EACnDO,EAAKvF,SAASkF,IAAQ,GAAMrH,KAAK6N,KAT5B,IAS8CxG,EAEnDrH,KAAK4N,OAAOmC,KAAMrI,GAClB1H,KAAKyN,MAAM7G,IAAKc,GAEhBA,EAAKG,SAAS0H,yBAK1BpB,OACInO,KAAK2N,SAAW,IAAIP,EAAM4E,cAC1BhS,KAAK2N,SAASsE,cAAe1S,OAAO2S,kBACpClS,KAAK2N,SAASwE,QAAS5S,OAAO2P,WAAY3P,OAAO4P,aAEjDnP,KAAKwN,UAAU4E,YAAapS,KAAK2N,SAAS9N,YAE1CN,OAAOR,iBAAkB,SAAU,KAC/BiB,KAAKqS,mBACN,GAEHrS,KAAK2N,SAAS9N,WAAWd,iBAAkB,YAAcuT,IAAQtS,KAAKuS,KAAKD,KAC3EtS,KAAK2N,SAAS9N,WAAWd,iBAAkB,WAAauT,IAAQtS,KAAKwS,OAAOF,KAEjExT,SAAS0P,eAAe,kBAChCzP,iBAAiB,QAASiB,KAAKmR,mBAAmBjM,KAAKlF,OAG9DwS,SACQxS,KAAK8N,gBAGT9N,KAAK+N,SAAStG,UAAUzH,KAAK8N,gBAGjCyE,KAAKxH,GACD,IAAI2B,EAAQ,IAAIU,EAAMjK,QAEtBuJ,EAAMvF,EAAM4D,EAAM0H,QAAUzS,KAAK2N,SAAS9N,WAAWX,YAAgB,EAAI,EACzEwN,EAAMrF,GAAQ0D,EAAM2H,QAAU1S,KAAK2N,SAAS9N,WAAWV,aAAiB,EAAI,EAE5E,IAAIwT,EAAY,IAAIvF,EAAM/B,UAE1BsH,EAAUrH,cAAcoB,EAAO1M,KAAK+N,SAASnO,QAG7C,IAAIgT,EAAaD,EAAUE,iBAAkB7S,KAAKyN,MAAMqF,UAAU,GAC/DF,EAAW/M,OAAS,EACnB7F,KAAK8N,eAAiB8E,EAAW,GAAGtU,OAEpC0B,KAAK8N,eAAiB,KAK9BuE,iBACIrS,KAAK2N,SAASwE,QAAS5S,OAAO2P,WAAY3P,OAAO4P,aACjDnP,KAAK+N,SAASnO,OAAOuI,OAASnI,KAAK2N,SAAS9N,WAAWX,YAAcc,KAAK2N,SAAS9N,WAAWV,aAC9Fa,KAAK+N,SAASnO,OAAO2G,yBACrBvG,KAAK2N,SAASwE,QAASnS,KAAK2N,SAAS9N,WAAWX,YAAac,KAAK2N,SAAS9N,WAAWV,cAG1FkP,UACI0E,sBAAuB,KACnB/S,KAAKqO,YAGO,SAAbrO,KAAK0B,MACJ1B,KAAK4N,OAAOjI,QAAU+B,IAClBA,EAAKsL,SAAS7L,GAAK,KACnBO,EAAKsL,SAAS3L,GAAK,MAI3BrH,KAAK+N,SAAStI,SACdzF,KAAK2N,SAASsF,OAAQjT,KAAKyN,MAAOzN,KAAK+N,SAASnO,UAKlB","file":"demo.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = (__webpack_require__(2))(0);","module.exports = {\n    console: {\n        log: function () {}\n    },\n    document: {\n        addEventListener: function () {},\n        removeEventListener: function () {},\n        body: {\n            clientWidth: 1920,\n            clientHeight: 1080,\n            addEventListener: function () {},\n            removeEventListener: function () {}\n        }\n    }\n};\n","module.exports = vendor;","'use strict';\n\n//Alex Pilafian 2016-2019 - sikanrong@gmail.com\n\nimport {Box2, Quaternion, EventDispatcher, Vector2, Vector3, Raycaster, Ray, MOUSE} from 'three'\n\n//test stubs\nif(typeof window == 'undefined'){\n    let window = require('../test/stub_dom');\n}\n\nclass MapControls extends EventDispatcher{\n\n        constructor(camera, domElement, options){\n            super();\n\n            this.camera = camera;\n\n            //Object to use for listening for keyboard/mouse events\n            this.domElement = ( domElement !== undefined ) ? domElement : window.document;\n\n            // Set to false to disable this control (Disables all input events)\n            this.enabled = true;\n\n            // Must be set to instance of Plane or Sphere\n            this.target;\n\n            // How far you can dolly in and out\n            this.minDistance = 1; //probably should never be 0\n            this.maxDistance = 100;\n\n            // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n            // Set to false to disable zooming\n            this.enableZoom = true;\n            this.zoomSpeed = 6.0;\n            this.zoomDampingAlpha = 0.1;\n            this.initialZoom = 0; //start zoomed all the way out unless set in options.\n\n            // Set to false to disable panning\n            this.enablePan = true;\n            this.keyPanSpeed = 12.0;\t// pixels moved per arrow key push\n            this.panDampingAlpha = 0.1;\n\n            // Set to false to disable use of the keys\n            this.enableKeys = true;\n\n            // The four arrow keys\n            this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n            // Mouse buttons\n            this.mouseButtons = { ZOOM: MOUSE.MIDDLE, PAN: MOUSE.LEFT };\n            \n            //Copy options from parameters\n            Object.assign(this, options);\n            let isTargetValid = false;\n\n            if(this.mode === undefined){\n                throw new Error('\\'mode\\' option must be set to either \\'plane\\' or \\'sphere\\'');\n            }\n\n            switch(this.mode){\n                case 'plane':\n                    isTargetValid = (this.target.normal !== undefined && this.target.constant !== undefined);\n                    break;\n                case 'sphere':\n                    isTargetValid = (this.target.center !== undefined && this.target.radius !== undefined);\n                    break;\n            }\n\n            if(!isTargetValid){\n                throw new Error('\\'target\\' option must be an instance of type THREE.Plane or THREE.Sphere');\n            }\n\n            // for reset\n            this.target0 = this.target.clone();\n            this.position0 = this.camera.position.clone();\n            this.zoom0 = this.camera.zoom;\n\n            this._changeEvent = { type: 'change' };\n            this._startEvent = { type: 'start' };\n            this._endEvent = { type: 'end' };\n\n            this._STATES = { NONE : - 1, DOLLY : 1, PAN : 2, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\n            this._init();\n        }\n\n        _init (){\n            if(this.target.distanceToPoint(this.camera.position) == 0){\n                throw new Error(\"ORIENTATION_UNKNOWABLE: initial Camera position cannot intersect target plane.\");\n            }\n\n            this._state = this._STATES.NONE;\n\n            this._mouse = new Vector2();\n\n            this._finalTargetDistance;\n            this._currentTargetDistance;\n\n            this._panTarget = new Vector3();\n            this._panCurrent = new Vector3();\n\n            this._minZoomPosition = new Vector3();\n            this._maxZoomPosition = new Vector3();\n\n            this._panStart = new Vector2();\n            this._panEnd = new Vector2();\n            this._panDelta = new Vector2();\n\n            this._dollyStart = new Vector2();\n            this._dollyEnd = new Vector2();\n            this._dollyDelta = new Vector2();\n\n            this._camOrientation = new Vector2();\n\n            this._zoomAlpha;\n\n            this._screenWorldXform = Math.tan( ( this.camera.fov / 2 ) * Math.PI / 180.0 );\n\n            //establish initial camera orientation based on position w.r.t. _this.target plane\n            this._straightDollyTrack();\n\n            this.camera.position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this.initialZoom);\n            this._finalTargetDistance = this._currentTargetDistance = Math.abs(this.target.distanceToPoint(this.camera.position));\n\n            this.camera.lookAt(this._maxZoomPosition); //set the orientation of the camera towards the map.\n            this._camOrientation = this._intersectCameraTarget().ray.direction.clone().normalize();\n\n            this._updateZoomAlpha();\n\n            //Assign event listeners\n\n            this.domElement.addEventListener( 'contextmenu', this._onContextMenu.bind(this), false );\n\n            this.domElement.addEventListener( 'mousedown', this._onMouseDown.bind(this), false );\n            this.domElement.addEventListener( 'mousewheel', this._onMouseWheel.bind(this), false );\n            this.domElement.addEventListener( 'MozMousePixelScroll', this._onMouseWheel.bind(this), false ); // firefox\n\n            this.domElement.addEventListener( 'touchstart', this._onTouchStart.bind(this), false );\n            this.domElement.addEventListener( 'touchend', this._onTouchEnd.bind(this), false );\n            this.domElement.addEventListener( 'touchmove', this._onTouchMove.bind(this), false );\n\n            this.domElement.addEventListener( 'keydown', this._onKeyDown.bind(this), false );\n\n\n            this.update();\n        }\n\n        _intersectCameraTarget(){\n            let intersection = new Vector3();\n            let ray;\n\n            switch(this.mode){\n                case 'plane':\n                    [-1, 1].forEach((orientation) => {\n                        if(intersection && intersection.length() > 0)\n                            return;\n\n                        ray = new Ray(this.camera.position, this.target.normal.clone().multiplyScalar(orientation).normalize());\n                        ray.intersectPlane(this.target, intersection);\n                    });\n                    break;\n                case 'sphere':\n                    ray = new Ray(this.camera.position, (new Vector3()).subVectors(this.target.center, this.camera.position).normalize());\n                    ray.intersectSphere(this.target, intersection);\n                    break;\n            }\n\n            return {\n                intersection: intersection,\n                ray: ray\n            }\n        }\n\n        _straightDollyTrack(){\n            this._updateDollyTrack(this._intersectCameraTarget().ray);\n        }\n\n        getZoomAlpha () {\n            return this._zoomAlpha;\n        }\n\n        reset () {\n\n            this.target.copy( this.target0 );\n            this.camera.position.copy( this.position0 );\n            this.camera.zoom = this.zoom0;\n\n            this.camera.updateProjectionMatrix();\n\n            this._init(); //reinit\n\n            this.dispatchEvent( this._changeEvent );\n\n            this.update();\n\n            this._state = this._STATES.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        update () {\n            var panDelta = new Vector3();\n            var oldPanCurrent = new Vector3();\n            var position = this.camera.position;\n\n            // move target to panned location\n            oldPanCurrent.copy(this._panCurrent);\n            this._panCurrent.lerp( this._panTarget, this.panDampingAlpha );\n            panDelta.subVectors(this._panCurrent, oldPanCurrent);\n\n            switch (this.mode) {\n                case 'plane':\n                    this._maxZoomPosition.add(panDelta);\n                    this._minZoomPosition.add(panDelta);\n                    break;\n                case 'sphere':\n                    const v = new Vector3();\n                    const quat = new Quaternion();\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 1 ), panDelta.x);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 0 ), panDelta.y);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    break;\n            }\n\n            position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this._updateZoomAlpha());\n\n            if(this.mode == 'sphere'){\n                this.camera.lookAt(this.target.center);\n            }\n        }\n\n        dispose () {\n            this.domElement.removeEventListener( 'contextmenu', this._onContextMenu, false );\n            this.domElement.removeEventListener( 'mousedown', this._onMouseDown, false );\n            this.domElement.removeEventListener( 'mousewheel', this._onMouseWheel, false );\n            this.domElement.removeEventListener( 'MozMousePixelScroll', this._onMouseWheel, false ); // firefox\n\n            this.domElement.removeEventListener( 'touchstart', this._onTouchStart, false );\n            this.domElement.removeEventListener( 'touchend', this._onTouchEnd, false );\n            this.domElement.removeEventListener( 'touchmove', this._onTouchMove, false );\n\n            window.document.removeEventListener( 'mousemove', this._onMouseMove, false );\n            window.document.removeEventListener( 'mouseup', this._onMouseUp, false );\n\n            this.domElement.removeEventListener( 'keydown', this._onKeyDown, false );\n        };\n\n        zoomToFit (mesh, center, width, height){\n            //if only width is passed interpret it as radius and set height equal to width\n            center = center || mesh.geometry.boundingSphere.center;\n            width = width || (mesh.geometry.boundingSphere.radius * 2);\n\n            if(height === undefined)\n                height = width;\n\n            this._panTarget.copy(mesh.localToWorld(center.clone()));\n            this._panCurrent.copy(this._intersectCameraTarget().intersection);\n\n            this._straightDollyTrack();\n\n            var vFOV = this.camera.fov * (Math.PI / 180);\n            var hFOV = 2 * Math.atan( Math.tan( vFOV / 2 ) * this.camera.aspect );\n            var obj_aspect = width / height;\n\n            this._finalTargetDistance = ((((obj_aspect > this.camera.aspect)? width : height) / 2) / Math.tan(((obj_aspect > this.camera.aspect)? hFOV : vFOV) / 2));\n\n\n        };\n\n        //returns a bounding box denoting the visible target area\n        targetAreaVisible(){\n\n            let bbox, vOffset, hOffset, center;\n\n            switch(this.mode){\n                case 'plane':\n                    var ray = new Ray(this.camera.position, this._camOrientation);\n                    var depth = ray.distanceToPlane(this.target);\n\n                    center = this.camera.position.clone();\n\n                    vOffset = this._screenWorldXform * depth;\n                    hOffset = vOffset * this.camera.aspect;\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset, center.y - vOffset),\n                        new Vector2(center.x + hOffset, center.y + vOffset)\n                    );\n\n                    break;\n                case 'sphere':\n\n                    const cam_pos = ((new Vector3()).subVectors(this.target.center, this.camera.position));\n                    const cam_xpos = new Vector3(cam_pos.x, 0, cam_pos.z);\n\n                    const halfPi = Math.PI / 2;\n\n                    center = new Vector2(\n                        cam_xpos.angleTo(new Vector3(1,0,0)),\n                        cam_pos.angleTo(new Vector3(0,1,0))\n                    );\n\n                    center.x = (this.camera.position.z < 0)? (2*Math.PI - center.x) : center.x;\n\n                    const d = cam_pos.length();\n\n                    //Derived from solving the Haversine formula for Phi_2 when all other variables\n                    //(d, r, Theta_1, Theta_2, Phi_1) are given\n                    vOffset = this._screenWorldXform * ((d / this.target.radius) - 1);\n                    vOffset = Math.min(vOffset, halfPi);\n\n                    //Account for the aspect ratio of the screen, and the deformation of the sphere\n                    const r = this.target.radius * Math.cos(center.y - halfPi);\n                    hOffset = vOffset * this.camera.aspect * ( this.target.radius / r);\n                    hOffset = Math.min(hOffset, halfPi);\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset - halfPi, center.y - vOffset - halfPi),\n                        new Vector2(center.x + hOffset - halfPi, center.y + vOffset - halfPi)\n                    );\n\n                    ['min', 'max'].forEach(_mm => {\n                        bbox[_mm].x = (bbox[_mm].x > Math.PI)? (-2*Math.PI + bbox[_mm].x): bbox[_mm].x;\n                    });\n\n                    break;\n            };\n\n            return bbox;\n        }\n\n        _updateZoomAlpha(){\n            this._finalTargetDistance = Math.max( this.minDistance, Math.min( this.maxDistance, this._finalTargetDistance ) );\n            var diff = this._currentTargetDistance - this._finalTargetDistance;\n            var damping_alpha = this.zoomDampingAlpha;\n            this._currentTargetDistance -= diff * damping_alpha;\n            var rounding_places = 100000;\n            this._zoomAlpha = Math.abs(Math.round((1 - ((this._currentTargetDistance - this.minDistance) / (this.maxDistance - this.minDistance))) * rounding_places ) / rounding_places);\n\n            return this._zoomAlpha;\n        }\n\n        _updateDollyTrack(ray){\n            let intersect = new Vector3();\n\n            switch(this.mode){\n                case 'plane':\n                    ray.intersectPlane(this.target, intersect);\n                    break;\n                case 'sphere':\n                    ray.intersectSphere(this.target, intersect);\n                    break;\n            }\n\n            if(intersect){\n                this._maxZoomPosition.addVectors(intersect, new Vector3().subVectors(this.camera.position, intersect).normalize().multiplyScalar(this.minDistance));\n                this._minZoomPosition.copy(this._calculateMinZoom(this.camera.position, intersect));\n\n                this._finalTargetDistance = this._currentTargetDistance = intersect.clone().sub(this.camera.position).length();\n            }\n        }\n\n        _getZoomScale() {\n            return Math.pow( 0.95, this.zoomSpeed );\n        }\n\n\n        _panLeft( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(- distance, 0, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 0 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( - distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        _panUp ( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(0, - distance, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 1 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        _pan (deltaX, deltaY) {\n            var element = this.domElement === window.document ? this.domElement.body : this.domElement;\n\n            var r = new Ray(this.camera.position, this._camOrientation);\n            var targetDistance;\n\n            switch(this.mode){\n                case 'plane':\n                    targetDistance = this._screenWorldXform * r.distanceToPlane(this.target);\n                    break;\n                case 'sphere':\n                    //in spherical mode the pan coords are saved as radians and used as rotation angles\n                    const camToTarget = (new Vector3()).subVectors(this.camera.position, this.target.center);\n                    targetDistance = this._screenWorldXform * ((camToTarget.length() / this.target.radius) - 1);\n                    break;\n            }\n\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\n            this._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.camera.matrix );\n            this._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.camera.matrix );\n\n        }\n\n        _dollyIn( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance /= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _dollyOut( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance *= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _cameraOfKnownType() {\n            return this.camera.type === 'PerspectiveCamera'\n        }\n\n        _handleUpdateDollyTrackMouse(event){\n            var prevMouse = this._mouse.clone();\n            this._mouse.set(( event.offsetX / this.domElement.clientWidth ) * 2 - 1, - ( event.offsetY / this.domElement.clientHeight ) * 2 + 1);\n\n            if(!prevMouse.equals(this._mouse)){\n                var rc = new Raycaster();\n                rc.setFromCamera(this._mouse, this.camera);\n                this._updateDollyTrack(rc.ray);\n            }\n        }\n\n        _handleMouseDownDolly( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n            this._dollyStart.set( event.offsetX, event.offsetY );\n        }\n\n        _handleMouseDownPan( event ) {\n\n            this._panStart.set( event.offsetX, event.offsetY );\n\n        }\n\n        _handleMouseMoveDolly( event ) {\n\n            this._handleUpdateDollyTrackMouse(event);\n\n            //console.log( 'handleMouseMoveDolly' );\n\n            this._dollyEnd.set( event.offsetX, event.offsetY );\n\n            this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseMovePan( event ) {\n\n            //console.log( 'handleMouseMovePan' );\n\n            this._panEnd.set( event.offsetX, event.offsetY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseUp( event ) {\n\n            //console.log( 'handleMouseUp' );\n\n        }\n\n        _calculateMinZoom(cam_pos, map_intersect){\n            return map_intersect.clone().add(\n                cam_pos.clone()\n                .sub(map_intersect)\n                .normalize()\n                .multiplyScalar(this.maxDistance)\n            );\n        }\n\n\n        _handleMouseWheel( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n\n            var delta = 0;\n\n            if ( event.wheelDelta !== undefined ) {\n\n                // WebKit / Opera / Explorer 9\n\n                delta = event.wheelDelta;\n\n            } else if ( event.detail !== undefined ) {\n\n                // Firefox\n\n                delta = - event.detail;\n\n            }\n\n            if ( delta > 0 ) {\n                this._dollyOut( this._getZoomScale() );\n            } else if ( delta < 0 ) {\n                this._dollyIn( this._getZoomScale() );\n            }\n\n            this.update();\n        }\n\n        _handleKeyDown( event ) {\n\n            //console.log( 'handleKeyDown' );\n\n            switch ( event.keyCode ) {\n\n                case this.keys.UP:\n                    this._pan( 0, this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.BOTTOM:\n                    this._pan( 0, - this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.LEFT:\n                    this._pan( this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n                case this.keys.RIGHT:\n                    this._pan( - this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n            }\n        }\n\n        _handleUpdateDollyTrackTouch( event ){\n            var centerpoint = new Vector2();\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            centerpoint.x = event.touches[ 0 ].pageX + (dx / 2);\n            centerpoint.y = event.touches[ 0 ].pageY + (dy / 2);\n\n            var mouse = new Vector2();\n            mouse.x = ( centerpoint.x / domElement.clientWidth ) * 2 - 1;\n            mouse.y = - ( centerpoint.y / domElement.clientHeight ) * 2 + 1;\n\n            this._updateDollyTrack(mouse);\n        }\n\n        _handleTouchStartDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyStart.set( 0, distance );\n\n        }\n\n        _handleTouchStartPan( event ) {\n\n            //console.log( 'handleTouchStartPan' );\n\n            this._panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n        }\n\n\n        _handleTouchMoveDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            //console.log( 'handleTouchMoveDolly' );\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyEnd.set( 0, distance );\n\n            this._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchMovePan( event ) {\n\n            this._panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchEnd( event ) {\n            //console.log( 'handleTouchEnd' );\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        _onMouseDown( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( event.button === this.mouseButtons.ZOOM ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseDownDolly( event );\n\n                this._state = this._STATES.DOLLY;\n\n            } else if ( event.button === this.mouseButtons.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseDownPan( event );\n\n                this._state = this._STATES.PAN;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                window.document.addEventListener( 'mousemove', this._onMouseMove.bind(this), false );\n                window.document.addEventListener( 'mouseup', this._onMouseUp.bind(this), false );\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onMouseMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( this._state === this._STATES.DOLLY ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseMoveDolly( event );\n\n            } else if ( this._state === this._STATES.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseMovePan( event );\n            }\n        }\n\n        _onMouseUp( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleMouseUp( event );\n\n            window.document.removeEventListener( 'mousemove', this._onMouseMove, false );\n            window.document.removeEventListener( 'mouseup', this._onMouseUp, false );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onMouseWheel( event ) {\n            if ( this.enabled === false || this.enableZoom === false || ( this._state !== this._STATES.NONE ) ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            this._handleMouseWheel( event );\n\n            this.dispatchEvent( this._startEvent ); // not sure why these are here...\n            this.dispatchEvent( this._endEvent );\n\n        }\n\n        _onKeyDown( event ) {\n\n            if ( this.enabled === false || this.enableKeys === false || this.enablePan === false ) return;\n\n            this._handleKeyDown( event );\n\n        }\n\n        _onTouchStart( event ) {\n\n            if ( this.enabled === false ) return;\n\n            switch ( event.touches.length ) {\n                case 1: // three-fingered touch: pan\n\n                    if ( this.enablePan === false ) return;\n\n                    this._handleTouchStartPan( event );\n\n                    this._state = this._STATES.TOUCH_PAN;\n\n                    break;\n\n                case 2:\t// two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n\n                    this._handleTouchStartDolly( event );\n\n                    this._state = this._STATES.TOUCH_DOLLY;\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onTouchMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            switch ( event.touches.length ) {\n\n                case 1: // one-fingered touch: pan\n                    if ( this.enablePan === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_PAN ) return; // is this needed?...\n\n                    this._handleTouchMovePan( event );\n\n                    break;\n\n                case 2: // two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_DOLLY ) return; // is this needed?...\n\n                    this._handleTouchMoveDolly( event );\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n        }\n\n        _onTouchEnd( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleTouchEnd( event );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onContextMenu( event ) {\n            event.preventDefault();\n        }\n\n};\n\nexport default MapControls;\n","var THREE = require('three');\nvar MapControls = require('./three-map-controls.js').default || THREE.MapControls;\n\nconst SPHERE_RADIUS = 10;\n\nclass MapControlsDemo {\n    constructor (mode) {\n        this.container = document.body;\n        this.scene = new THREE.Scene();\n        this.renderer = null;\n        this.meshes = [];\n        this.dims = 10;\n        this.selectedObject = null;\n        this.controls;\n        this.mode;\n\n        this.debugCamViewInterval;\n\n        this.camViewMesh;\n        this.camViewLines;\n\n        this.init();\n        this.setMode(mode);\n        this.animate();\n    }\n\n    setMode(mode) {\n        this.mode = mode;\n        const links = {\n            sphere: document.getElementById('sphere-link'),\n            plane: document.getElementById('plane-link')\n        };\n\n        links[this.mode].style.display = 'none';\n        links[(this.mode == 'plane')? 'sphere' : 'plane'].style.display = 'inline-block';\n\n        this.meshes.concat([this.camViewLines, this.camViewMesh]).forEach((_m) => {\n            if(_m === undefined){\n                return;\n            }\n\n            this.scene.remove(_m);\n            _m.geometry.dispose();\n        });\n\n        this.camViewLines = this.camViewMesh = undefined;\n\n        switch(this.mode){\n            case 'sphere':\n                this.initSphere();\n                break;\n            case 'plane':\n                this.initPlane();\n                break;\n        }\n    }\n\n    initSphere(){\n\n        var camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 1000 );\n        camera.position.z = 40;\n        this.controls = new MapControls( camera, this.renderer.domElement, {\n            target: new THREE.Sphere(new THREE.Vector3(0,0,0), SPHERE_RADIUS),\n            mode: 'sphere',\n            minDistance: 1,\n            maxDistance: camera.position.z\n        });\n\n        const colors = [];\n\n        const geometry = new THREE.SphereBufferGeometry(SPHERE_RADIUS, this.dims, this.dims);\n        geometry.computeBoundingSphere();\n\n        const vertices = geometry.getAttribute('position').array;\n        for(var i = 0; i < vertices.length; i += 3){\n            var color = new THREE.Color();\n            var vert = new THREE.Vector3(vertices[i], vertices[i+1], vertices[i+2]);\n\n            color.setRGB(\n                ( vert.x / SPHERE_RADIUS ) + 0.5,\n                ( vert.y / SPHERE_RADIUS ) + 0.5,\n                ( vert.z / SPHERE_RADIUS ) + 0.5\n            );\n\n            colors.push( color.r, color.g, color.b );\n        }\n\n        geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( Float32Array.from(colors), 3 ) );\n\n        const points = new THREE.Points(\n            geometry,\n            new THREE.PointsMaterial( { size: 1, vertexColors: THREE.VertexColors } )\n        );\n\n        this.scene.add( points );\n        this.meshes.push( points );\n\n        const polys = new THREE.Mesh(\n            geometry,\n            new THREE.MeshBasicMaterial({\n                vertexColors: THREE.VertexColors,\n                transparent: true,\n                opacity: 0.2\n\n            })\n        );\n\n        this.meshes.push( polys );\n        this.scene.add( polys );\n\n        const lines = new THREE.Mesh(\n            geometry,\n            new THREE.MeshBasicMaterial({\n                vertexColors: THREE.VertexColors,\n                wireframe: true\n            })\n        );\n\n        this.meshes.push( lines );\n        this.scene.add( lines );\n\n    }\n\n    toggleDebugCamView(e){\n        if(!e.target.checked){\n            clearInterval(this.debugCamViewInterval);\n            this.scene.remove( this.camViewMesh );\n            this.scene.remove( this.camViewLines );\n            this.camViewMesh.geometry.dispose();\n            this.camViewLines.geometry.dispose();\n            this.camViewLines = this.camViewMesh = undefined;\n            return true;\n        }\n\n        this.debugCamViewInterval = setInterval(() => {\n            const bbox = this.controls.targetAreaVisible();\n            console.log(`${bbox.min.x}, ${bbox.min.y}, ${bbox.max.x}, ${bbox.max.y}`);\n\n            let geometry, position;\n            position = new THREE.Vector3(0,0,0);\n\n            switch (this.mode) {\n                case 'sphere':\n                    let phidelta = Math.abs(bbox.max.x - bbox.min.x);\n                    if(phidelta > Math.PI){\n                        phidelta = Math.abs((bbox.max.x + Math.PI*2) - bbox.min.x);\n                    }\n                    geometry = new THREE.SphereBufferGeometry(SPHERE_RADIUS, this.dims, this.dims,\n                        bbox.min.x + Math.PI/2, //phistart\n                        phidelta, //philength\n                        -bbox.max.y + Math.PI/2, //thetastart\n                        Math.abs(bbox.max.y - bbox.min.y) //thetalength\n                    );\n                    break;\n                case 'plane':\n\n                    geometry = new THREE.PlaneBufferGeometry(\n                        (bbox.max.x - bbox.min.x),\n                        (bbox.max.y - bbox.min.y),\n                        this.dims, this.dims\n                    );\n\n                    position.copy(this.controls.camera.position);\n                    position.z = 0;\n\n                    break;\n            }\n\n            if(this.camViewMesh == undefined){\n                this.camViewMesh = new THREE.Mesh(\n                    geometry,\n                    new THREE.MeshBasicMaterial({\n                        color: new THREE.Color(255, 0, 0),\n                        side: THREE.DoubleSide,\n                        transparent: true,\n                        opacity: 0.5\n                    })\n                );\n\n                this.camViewLines = new THREE.Mesh(\n                    geometry,\n                    new THREE.MeshBasicMaterial({\n                        color: new THREE.Color(255, 0, 0),\n                        wireframe: true\n                    })\n                );\n\n                this.scene.add( this.camViewMesh );\n                this.scene.add( this.camViewLines );\n            }else{\n\n                this.camViewMesh.geometry.copy(geometry);\n                this.camViewLines.geometry.copy(geometry);\n\n                geometry.dispose();\n            }\n\n            this.camViewMesh.geometry.computeBoundingSphere();\n            this.camViewMesh.position.copy(position);\n            this.camViewLines.position.copy(position);\n\n        }, 1000);\n    }\n\n    initPlane(){\n\n        var camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );\n        camera.position.z = 20;\n        this.controls = new MapControls( camera, this.renderer.domElement, {\n            target: new THREE.Plane(new THREE.Vector3(0,0,1), 0),\n            mode: 'plane',\n            minDistance: 2.0,\n            maxDistance: 20\n        });\n\n        var offset = 3;\n\n        for(var x = 0; x < this.dims; x++){\n            for(var y = 0; y < this.dims; y++){\n                var geometry = new THREE.CubeGeometry(1, 1, 1);\n                var material = new THREE.MeshNormalMaterial();\n\n                var mesh = new THREE.Mesh( geometry, material );\n                mesh.position.x += ((-0.5 * this.dims * offset) + (x * offset));\n                mesh.position.y += ((-0.5 * this.dims * offset) + (y * offset));\n\n                this.meshes.push( mesh );\n                this.scene.add( mesh );\n\n                mesh.geometry.computeBoundingSphere();\n            }\n        }\n    }\n\n    init () {\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setPixelRatio( window.devicePixelRatio );\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n        this.container.appendChild( this.renderer.domElement );\n\n        window.addEventListener( 'resize', ()=>{\n            this.onWindowResize();\n        }, false );\n\n        this.renderer.domElement.addEventListener( 'mousedown', (_e) => {this.pick(_e)} );\n        this.renderer.domElement.addEventListener( 'dblclick', (_e) => {this.zoomTo(_e)} );\n\n        const cb = document.getElementById('toggleCamDebug');\n        cb.addEventListener('click', this.toggleDebugCamView.bind(this));\n    }\n\n    zoomTo(){\n        if(!this.selectedObject)\n            return;\n\n        this.controls.zoomToFit(this.selectedObject);\n    }\n\n    pick(event){\n        var mouse = new THREE.Vector2();\n\n        mouse.x = ( event.clientX / this.renderer.domElement.clientWidth ) * 2 - 1;\n        mouse.y = - ( event.clientY / this.renderer.domElement.clientHeight ) * 2 + 1;\n\n        var raycaster = new THREE.Raycaster();\n\n        raycaster.setFromCamera(mouse, this.controls.camera);\n\n        // calculate objects intersecting the picking ray\n        var intersects = raycaster.intersectObjects( this.scene.children, true );\n        if(intersects.length > 0){\n            this.selectedObject = intersects[0].object;\n        }else{\n            this.selectedObject = null;\n        }\n\n    }\n\n    onWindowResize(){\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n        this.controls.camera.aspect = this.renderer.domElement.clientWidth / this.renderer.domElement.clientHeight;\n        this.controls.camera.updateProjectionMatrix();\n        this.renderer.setSize( this.renderer.domElement.clientWidth, this.renderer.domElement.clientHeight );\n    }\n\n    animate(){\n        requestAnimationFrame( () => {\n            this.animate();\n        } );\n\n        if(this.mode == 'plane'){\n            this.meshes.forEach(( mesh ) => {\n                mesh.rotation.x += 0.005;\n                mesh.rotation.y += 0.01;\n            });\n        }\n\n        this.controls.update();\n        this.renderer.render( this.scene, this.controls.camera );\n    }\n};\n\nwindow.addEventListener('load', () => {\n    window.demo = new MapControlsDemo('sphere');\n});"],"sourceRoot":""}